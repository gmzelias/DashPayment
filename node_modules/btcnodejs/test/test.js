"use strict";
const net = require("../lib/network");
const assert = require("assert");
const transaction = require("../lib/transaction");
const scripts = require("../lib/scripts");
const crypto = require("../lib/crypto");
const address = require("../lib/address");
const ByteBuffer = require("bytebuffer");
const BlockHeader = require("../lib/block").BlockHeader;
const hd = require("../lib/hd");
const solvers = require("../lib/solvers");
const $ = require("../tools/conversions");
const fs = require("fs");
const _ = require("lodash");
net.setup("testnet", true);
const blocks = [
  {
    hash: "0000000000000178a6f26995c9937e99d42c1d4d4131ad162e283d34a9633780",
    raw:
      "00000020751406511dd24f6972987b00049e8ddcaa53e9a5402a9c3e320000000000000061acb5579267e3ebec145871380c3e4f9759fbe1476e76149fed1647980d84522bf92" +
      "359a1ca041a55a1eee30c01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff2a03452c11042bf923592f244d696e65642062" +
      "792037706f6f6c2e636f6d2f0100000048db000000000000ffffffff0126e65409000000001976a914255c8fce64bc2c994f6f1d2cc85579983601bb5488ac000000000100000" +
      "0017363302165009d464cad2867df7f3d97979258ff9cf2c94fe5329ec149992a0a01000000d900473044022043781eaef3d91c3dec2ecc7092dda492d785aad19769e227ba99" +
      "343656b32bb1022006ea05e1c7578774e3cd6b77e23ae62c9335bf4108dd17a16ab7857be7fd58700147304402203a7b1e1426099fc37789df566646886a105a2062b5170f916" +
      "23fbf03005d6a9502207cce979d47a1ded7a1db101a204048e635c6f1eb7f89bbc08bc7a0ac3c7ddb2d0147522102632178d046673c9729d828cfee388e121f497707f810c131" +
      "e0d3fc0fe0bd66d62103a0951ec7d3a9da9de171617026442fcd30f34d66100fab539853b43f508787d452aeffffffff0240420f000000000017a9140c3b53daff6dea5651309" +
      "8d72aa18138fdda503287f2dd647e0000000017a9148ce5408cfeaddb7ccb2545ded41ef4781094548487000000000100000001b1caab76a5198100d2daaeb22f5a73786c1be1" +
      "dd4979def0844b4af6a2b5759701000000da004730440220679c47ac4cc8135b322483dd4e53979ec650225d8acb3da4f5d8cf7746988d4a02207e96e67bc865632ffd29bf1f9" +
      "bd5f51d2a69de94fa8e93ecbfd9dc0fc58fd2ee01483045022100810052ac4d4731433bb8800e767d52933b201223651a2aea5019818c83b47d8d022023cd498fe594cdfc9d5b" +
      "0861421731d7a67f0253ab413cae3c2b518eba9176d00147522102632178d046673c9729d828cfee388e121f497707f810c131e0d3fc0fe0bd66d62103a0951ec7d3a9da9de17" +
      "1617026442fcd30f34d66100fab539853b43f508787d452aeffffffff0240420f000000000017a9149177db5b7b36c858e779e875398874b44b4291278724f7537e0000000017" +
      "a9148ce5408cfeaddb7ccb2545ded41ef4781094548487000000000100000001c79a11e2d9e715cf74509a4fd892065cc5a29e5d47ea955bd473388ae15702fe01000000db004" +
      "83045022100d5356c3cbccac67a82d8ae2a9164158c89a9d697bf8d1ab3365f721180a361cf022046dc8e00e755d9600bce5273ab429daf64d94387809708576a4938e0b8121b" +
      "df01483045022100d6cb1f5f720a01f05526316e6a52c4b26a936fe09b7ec8f2c449ac1bf4e87c9202205d8cc290a6e7758615ea2df2d8736f49fbe54fe538a8ea169803beed4" +
      "5d53c130147522102632178d046673c9729d828cfee388e121f497707f810c131e0d3fc0fe0bd66d62103a0951ec7d3a9da9de171617026442fcd30f34d66100fab539853b43f" +
      "508787d452aeffffffff0240420f000000000017a91407f8e7ae1e3a611818b11c571fc1f37e7c9485f3870206387e0000000017a9148ce5408cfeaddb7ccb2545ded41ef4781" +
      "094548487000000000100000001b9f2d7513c823afcc6dc0e0afb64d61da468ba0e26da9bd909a4eaa45813fe0a010000006b483045022100c31aaa1fb2cbd5fef776baffa9e2" +
      "171903b5826846c2d8decf6d9bd1403a5c2a022074f88e660647006b4f1557198c0f4e3b502cb1e91a2388081280aa6eee81af590121036576eed4dd5de137031c22b1375cd0a" +
      "67b9e17a4efd8cab8b07b1fa7e1679791feffffff02459e62060000000017a914c69533b4df0e4afe850863ad19d4775057023d5e87d2ebf89e6f0000001976a914c5b1f3478d" +
      "a9559680472a48d8eda4f42d0a3bee88ac3b2c11000100000001c4f627209c6f4bf1851986b543924fde50b40d1a12a93022534fb4d842e51975010000006b483045022100c0b" +
      "aa3c2d3eb4cc7ecc7636a2c4ce273bc362a287f9d09f3a4353018c5d4832b02204268cae2e2921a5164663a550c9f965d05e81fc0d77d9ea549913c1cfc778a730121038516ab" +
      "e640be18deeab8cbb129c2265a58a5102b2c187c3b00041c4b64bafa38ffffffff0323020000000000001976a9146e9fb388545eeac583779c09e212298249e4a91388acac120" +
      "100000000001976a9141e7034e686d3df27a484a8e06e99bc9b2a82a63a88ac0000000000000000026a000000000001000000012ddfbd28c7137c773ca8e88bb9887dfe503c3f" +
      "a530c909186803c913631d4f6b010000006b483045022100abaa2211961cf9dd4238e764286638e9d1f8b8e323f9f45729ddd8c4aa505449022041d90fccbb619d87d8edb7fe1" +
      "5f5a1117573a186ca7bf2e421087e42cd1a4f7a0121038516abe640be18deeab8cbb129c2265a58a5102b2c187c3b00041c4b64bafa38ffffffff0323020000000000001976a9" +
      "146e9fb388545eeac583779c09e212298249e4a91388acac120100000000001976a9141e7034e686d3df27a484a8e06e99bc9b2a82a63a88ac0000000000000000026a0000000" +
      "00001000000015e29111ced61eb17fedfbcecce965cccf252a22c40667707c909e9d91f1ae826030000006a473044022034b5aa260e3a8de2da3a4daa99d0deb556d68a6dd627" +
      "551a8a768748df9a2b2c022042a12fce0105bd76742457e0a03c2f56397cecb4d0080605952f009788ed549c012103b64e32e5f62e03701428fb1e3151e9a57f149c67708f6164a23" +
      "5c8199fe17cc2ffffffff0510270000000000001976a91413b29e222f7e96f7fc4e51778215d2071c25fe2a88ac10270000000000001976a91413b29e222f7e96f7fc4e51778215d2" +
      "071c25fe2a88aca0860100000000001976a91413d35ad337dd80a055757e5ea0a45b59fee3060c88ac5cd9d30c000000001976a91413d35ad337dd80a055757e5ea0a45b59fee3060" +
      "c88ac0000000000000000026a000000000001000000029d796553688d8222bb83fe004c1afdc378c94ddb9cd9048b6310162ad341f7da020000006a4730440220095b1cd23f1dc234" +
      "18062ef38376d6582fc04cda323a8b05ea82dd12cd937f3002200153083fd8da6cb810c04e4444361aaf8318feaa006c198babd82609c397f48e012103b64e32e5f62e03701428fb1" +
      "e3151e9a57f149c67708f6164a235c8199fe17cc2ffffffff4d195edfbfb89c1e06eef5fd0ac799c0618917864e9db9f5babff9994694c275030000006b483045022100b8d223a5d4" +
      "cb5ad084f398d32264f76252b27aa964b75a78c62dc994697e313502201938f8a83262a47a46d29b5e3d34ca10d99eb2a0b4e823cb20aa0cedd1455367012103b64e32e5f62e03701" +
      "428fb1e3151e9a57f149c67708f6164a235c8199fe17cc2ffffffff0510270000000000001976a914464d545207666eae5cf656eb2e3ef3683c3845d088ac10270000000000001976" +
      "a914464d545207666eae5cf656eb2e3ef3683c3845d088aca0860100000000001976a91413d35ad337dd80a055757e5ea0a45b59fee3060c88ac46931604000000001976a91413d35" +
      "ad337dd80a055757e5ea0a45b59fee3060c88ac0000000000000000026a0000000000010000000140255d7edf9a8e9896b49883b984450d98b85b685f6480ea64ef3110d1e24ea101" +
      "0000006b483045022100dc91cc36ab937a96fca53b60d2e3d7d3e0fe1df1780301de69a90769c51fc311022001546d83d88a951bbefb4dfa4755fead9a1f92a1a89622fa56cf7e466" +
      "5a553890121024e68ae959c2e5ea5930d7fb0b0b657237345002a2f796f3cb5c88ef169f7ae1fffffffff026887eb0b000000001976a91483733adf835c38ff1f38f9c94f20304611" +
      "80233f88ac0000000000000000516a4c4e424c466f7220676f6f64206c75636b2c2049206c696b65206d79207268796d6573206174726f63696f75730a537570657263616c6166726" +
      "167696c697374696365787069616c69646f63696f7573000000000200000001749b7bb91129f6cfdf0e718bb93b69913aa042b5b95d0a75b53ddaf620f47b6b010000006a47304402" +
      "20457a6bba7567339990a908aa8e01581bafef6fed897ec38665db6289b08e43c902203daeff344efb8c0ba115e6a438352fbbb18fb8faff908ef537989c0582d78df20121022492b" +
      "726a9f9145a55de46c30788e464078e177f6f06517441a0a2e0a983cea6feffffff02d0070000000000001976a9142d7cd96c8c3c5abed84b00f14925fcd850b0996488ac6cd9d508" +
      "000000001976a91400e11e0f2b95cf19618a469b04e5ce4c2771269088ac432c11000200000001a10a003534b680f823eb6327f18f7d25b62099c68514cc2a9c21e3e022b89f80010" +
      "000006b483045022100a2147a82ffb809ae8c9ca1cb19e0ae47ea59820a96c4f08d1a6a18bd122df45e02205cf7aa73155ef4ea151268a01c4782d1abb067257d4d6eb648fb103cb6" +
      "aed2f0012103b3291cab50639641beef486d0ee263ef670528407fb2ba9eb4c313babf3f93d1feffffff02ad9e1708000000001976a914f11e2d2a4d92ce294c587eb8c334cb95c29" +
      "0126388acd0070000000000001976a914cf0fe6b32ab653dfab2ecc97b1ab07133ceef3b688ac162c1100"
  }
];
const transactions = [
  {
    raw:
      "0100000001e4da173fbefe5e60ff63dfd38566ade407532294db655463b77a783f379ce605000000006b4" +
      "83045022100af246c27890c2bc07a0b7450d3d82509702a44a4defdff766355240b114ee2ac02207bb67b" +
      "468452fa1b325dd5583879f5c1412e0bb4dae1c2c96c7a408796ab76f1012102ab9e8575536a1e99604a1" +
      "58fc60fe2ebd1cb1839e919b4ca42b8d050cfad71b2ffffffff0100c2eb0b000000001976a914df76c017" +
      "354ac39bde796abe4294d31de8b5788a88ac00000000",
    txid: "e977c07090c2a1dcaefd3f3c4ebf4e231f4116cb272f805b0b22a85e7eece09c"
  },
  {
    raw:
      "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3d03" +
      "9920071c2f706f6f6c2e626974636f696e2e636f6d2f4249503130302f42382f0a092f4542312f4144362f" +
      "109c52640027ed852ba74c0741c3eb0100ffffffff0150526653000000001976a9143fa71ed2e38d431960" +
      "f314e7e7aad476a5496b4c88ac00000000",
    txid: "5b5dce3e53f022347d4980def060444fd1cfe59a1713576c0a687bddb61410e6"
  },
  {
    raw:
      "01000000019ce0ec7e5ea8220b5b802f27cb16411f234ebf4e3c3ffdaedca1c29070c077e9000000006a47" +
      "3044022023f8defe75c885304eeec0e73fb85c5a05a6e391a2740d506dc0c636be88037602207678ccf482" +
      "d28bb4fae1c3200a15e9923c4549c20f1ab52d12e33dfe41fd532a012102ab9e8575536a1e99604a158fc6" +
      "0fe2ebd1cb1839e919b4ca42b8d050cfad71b2ffffffff01603bea0b0000000017a91463a4f7bc51068716" +
      "1df3773e3581bcc2bea034158700000000",
    txid: "7f38b7d94a3ad36ef92496b9060b8fbbe21e76b12541cd06c3a76c9cff6254e4"
  },
  {
    raw:
      "01000000014e41362c2809e7913c707082085bb907075b6e47a14afdf29ac0befd64f6993c000000006b48" +
      "3045022100b7bf286e5f6ac6fa308e8876a8a59b289094851a26cf62c20abd174917eb7762022069b5269e" +
      "584e4c76f207d1b789bff7171a663d795e49751c12cf07dceb2a94c70121024a0dcb0527c2751ea4dda3aa" +
      "98f6eface16e978dba8062bcbed623f158c07691ffffffff0100c2eb0b00000000232102ab9e8575536a1e" +
      "99604a158fc60fe2ebd1cb1839e919b4ca42b8d050cfad71b2ac00000000",
    txid: "119b712e42a7162b047380e2f13a54b20cdf2c1f3dc0f5f9962e8866ad62debe"
  }, //3c99f664fdbec09af2fd4aa1476e5b0707b95b088270703c91e709282c36414e
  {
    raw:
      "01000000016c2fc8db7293fd11e81927ecf2de5f7e0fde5680fb403eea1a121f34f8031c6300000" +
      "0006a47304402207d67581328939a31e1b1ee3197a58213bb8ccdbad81674bd30de753b250433c3" +
      "0220352e896cd5b70de63cc7da24f3fd2c0b3a3ff5f92e5669a6463c30a0cbf198cb0121032115b" +
      "7aa4f5f7326ada568f9f4f943edf767401dfebeef64c511af43568af6afffffffff0140fbbd0b00" +
      "0000000402beef8700000000",
    txid: "0022dac4f32287fbeafef7a824ed37a44afe11c05432684f438bcf8dd31cae3d"
  },
  {
    raw:
      "01000000018f50fd5a81232158db9f4c4b4c986462f416336afeb47d18cacf340d9a4f5a1a" +
      "000000006b48304502210083e6e7507e838a190f0443441c0b62d2df94673887f4482e27e8" +
      "9ff415a90392022050575339c649b85c04bb410a00b62325c1b82c537135fa62fb34fae2c9" +
      "a30b0b01210384478d41e71dc6c3f9edde0f928a47d1b724c05984ebfb4e7d0422e80abe95" +
      "ffffffffff0140f2800b0000000017a914edec274adaf3df84ca0f482d5deed0e792c4fd92" +
      "8700000000",
    txid: "14dd31532ca06d62121fd13d35a2c9090246291960e73bf2bb3615abcb1bedab"
  },
  {
    raw:
      "0100000001f445abc9193429f275810c0b0850aef316698f9e5b09d8b16728d3e8" +
      "0ce37727000000006b483045022100a5754a57e75699f1859ea315742fff957434" +
      "aba7f171b6d9a21f9c07cbc5e94d0220015cb427435ceaffb7e527cb788a81e8b1" +
      "ca076bcd5b039ff42cfaab4be0e0b0012103bd1d6d6f49ac53cf0953fa2d5149db" +
      "0b788aefd3d9312b1c2e9aeab20665e3b5ffffffff0140e9430b0000000017a914" +
      "ed4a0e1af5316666499ec6f8a5a99bf4abaf75498700000000",
    txid: "24f0010a757f1fbb994c7b37a2a0bc8624605d2be16089a753747c5e00227e59"
  },
  {
    raw:
      "01000000000101a175df86d9e04c1f93d03be2cabac8b61c6deb170c0475ad460546798f120f950000000017160014" +
      "f81b6a6cfaaf19dbd9e56b9cab2d8a457608ad8effffffff0204b46a000000000017a914b4d558b1b5c7b93870c21e" +
      "eab75186afe0be30d587809698000000000017a914b2eb061810dac0614ac3e06d1bc55077b32b3b26870247304402" +
      "200d0fbf48270e690be17cb0c47ee6ce2df3b671c2e4b196065e09c6df649b807c022056d8f10da83b2856458152c7" +
      "f09e53a3495f3fbdd2e20638586a52ddff4f495b012102a079cb0269c933b1ee041a933092c9c439dd1b3a4eebd32a" +
      "e391cf815002d37800000000",
    txid: "c21d7b8ae6078a269b1d0a6f203f74e129a65e0109544e0820ef1b7f4a42a976"
  }, //c21d7b8ae6078a269b1d0a6f203f74e129a65e0109544e0820ef1b7f4a42a976
  {
    raw:
      "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3d03da580700" +
      "047eb19a59040234f82e0cd5e0545b00aeaaaa000000000a636b706f6f6c192f6d696e65642062792067626d696e65" +
      "72732f202f4e59412fffffffff0335b8eb59000000001976a914cf606319cf4aa8fac6a39a8aceadfdafa6d9444288" +
      "ac0000000000000000266a24aa21a9ed3572a556dcf33879fe523d5a7429ad2c68372a24444b7c1ede8af879aafc0b" +
      "c14ead7300000000001976a914cf606319cf4aa8fac6a39a8aceadfdafa6d9444288ac00000000",
    txid: "41c0c962f5b4870f928a793a159507d182bf14b267de88ddbd50fb40bbdb9b90"
  },
  {
    raw:
      "010000000913373a72d812e02cc6a7498ef008b1afbfdf0639f018bcf60f4c14f8056afded010000006b4830450221" +
      "009b40c84d4417dc185a5c63ae066b2b163e7734521d22db3af5e5984573d4e26702201298e64c64ee22492b9fc773" +
      "64a732c2d6c0526d2009eb0072f1b69c337c9777012102e295b8d82e8f8bffe74afc7185b242a362271256bf7efaeb" +
      "65dfaa4edfdbac7cffffffffea7257550366f56d6908ca8906b97b5b54fa618dcfb5451fbed3a360a9551d52010000" +
      "006a4730440220381c77a6a6246a4438f763c68ace78b6bc7e9cdefc660eb34f72ea0121dc16a1022034cab102e32b" +
      "8c630a3b328a2c9f747706ed326a27c5df05ed1d8198f3e9d2d101210358a1760150b876fb20ab76c068636f171f2a" +
      "731dfe78d95807a9d836101bc671ffffffff22e6e2fd80d89f0fa8692e0521be424ece8c25d07ce46249be3420e501" +
      "886605010000006b483045022100b87f4985a088fcb171318354a9c3354b9e417ccd7f3bcfea71b3e77abac18ca602" +
      "204f60c1e7c55865ebdbfe2c0584e5cf81e1e95d1ebb912fc0bcfb5585dc98349401210358a1760150b876fb20ab76" +
      "c068636f171f2a731dfe78d95807a9d836101bc671ffffffffbdf330e14b33e09d975fb2696f4b4dec65a36a129ce2" +
      "843fc1ee045a9f2eaf87010000006b483045022100b36bfd57c61a4c049cd126cfa04626fef40f996526d655e12d34" +
      "3307ac5b916002204414acee7852be78c99edd5110bc43ea051ba2a570931c101aa6db40125403f70121030888863f" +
      "cb4cdf5b7d33b40e613af35df8f39d576e7972238b0d396cd3fcc3f2ffffffffd753a5a4d149dfa9c31d95ece89be7" +
      "ebc69ea611f73e2eb62a3f140605d121ba000000006b483045022100a0ada16055cbc604d1c235948e65b54fdf25aa" +
      "db4e9c7268870c253e93a492e0022027ebb709e77e735c41bc7ebf55e879a664a0e932b49f5b16f4e774b827b22509" +
      "0121030888863fcb4cdf5b7d33b40e613af35df8f39d576e7972238b0d396cd3fcc3f2ffffffffc6fd07324711df9f" +
      "595d0abb9a9357e18919a60f83b559f00ae1ccdd0160808f010000006b48304502210081751a36be448337062f8c9b" +
      "d23b88791e7c39b0697468bbf186e6c4650eb8da02202e59babe11debf493793243cb622139699bc2264de6c47e674" +
      "9b2f0ab66f3e780121030888863fcb4cdf5b7d33b40e613af35df8f39d576e7972238b0d396cd3fcc3f2ffffffffbe" +
      "071b3e026af92d78c06b39b0c67412ce5c681679f4b928f2871da664fd68b6010000006b483045022100c7f14fc0da" +
      "f56078d126bdaf5fe3d58cd745b7d14c880f4061dff8aac48bb401022075d1911d4c7a646e8a4de2adc1621fd33b55" +
      "d1dfad2ce69507d61c2c0f6c3eec012103e1ea181295e427ae83dde09e92e3c1e891281db419102dfca269703a0ba0" +
      "9f88ffffffffd88455dd98097414191c3c62fa4314e1e8a393f2a0ed80e56a61a3a072892c2c020000006a47304402" +
      "207da9d6f9a0cc39696221eac1197677f363e967d9b4647b98009491c9f4975f1b02206ca70f09f0c56c04d1f27433" +
      "0b8013311b62ab304d096853858282b38a3e0e4d0121032715f134f774c204784dcc2000ee20eaed1153dd7d204e9a" +
      "c9b664d943c1e2a7ffffffffc0e67c51e20c682c8ab6bf82ff4b014699d70aa17f0c505596150871f2e95d51010000" +
      "006a47304402207c097d6946f2bca51e621ba721c11471ebc33ed4cd8515386a019257ff558b03022020ed159f0261" +
      "2dc305e356c0f9d834919e4f4fca3205b5cabcb13b309d5612b1012102000a5a0ba2a5368ddc7cf512c1ebf642702e" +
      "353b3c8d87168a41838a42c51245ffffffff0220a10700000000001976a91458be4e12275e895c797c9bf7533452c5" +
      "a41e455188accb440f00000000001976a9149e932478c94eed17dbecff9ce1536d1bad199e3588ac00000000",
    txid: "224504b9816ef5c8d4f4f565ed2937cec53c448c53972a4509442f930f51d5bc"
  },
  {
    raw:
      "01000000140f78771c67a80f914a9b285247e652068035b6919df0fabaa2e2ff95b86327a3010000006a4730440220" +
      "495f3963e6025045385649ec0eed4a4562be0d4e3d009148fef1f46956b315420220211804c4bd3f56ed36a7c6f2a2" +
      "f3e91e6753a092e0c8adc73922efab9ea8a119012102e6b55349c68e804bb8fcb6b5294c4b2f18ad8b5b03e94a1401" +
      "8e23787a4f0e1efeffffff92056a357e07088c5faff5b6b3b8c0dd73a8960bca5ac79be49c05fc74703f5600000000" +
      "6a4730440220153631df49b8c4b7b94f9aaddc7445108bb0ac008d1e98b61025649baf75c0b502201e4087daab3d92" +
      "8fad19adf94a598347af5c4c220fd27fa770fa58dbaf03ca5c012103fc0e736ffa10d368fdec35857b5cc88fbc9af2" +
      "6aad607d3fbe5dde8a02077cddfeffffffc7b7d487b962a71fd7f16b636139b3095cfdb55240b5c0d0f200d10315ca" +
      "95ea010000006a473044022056da308185ff37e6b3d1f83a66fcdceef47a09b34edbf3b3329f064f9497f217022049" +
      "258fdeb0c3f492139dee7284bfa48fa4629c39c31443aaf34e6eda42ca584501210343eeac4235c4b418ec9169fc94" +
      "57f07930ceeddd6e694d57ffb4637755fee32bfeffffff18b4954c3c4129939cc28e059a9f9d4dd0f097c98537df79" +
      "c4895344c4d14fbb010000006b4830450221009fbd9dc4bcfb19f06bd42d13b43dfbfc9b270bdad9f3a6834de21436" +
      "447bc6000220107dac956dc4b7a222386c71b77538d99bca4e0e6d6e1eaf3bfd89bb3b037d030121035b552fe876d9" +
      "bc2d0bf2378ecb13537c434cc96ed821a2747f731fc6925f7de6feffffff7cf2f93eeb75144acac84bf6cf4db578a0" +
      "6cebb4c96c9ad20b64c27c3313053e0a0000006b483045022100e4e47300b57f68c8bdafe99c05aa67c9c42c9baad0" +
      "bdc24402921f1b09d2610002204e4d9e72fd21c927fb818bf34e0de81d5d381c64f78088289ffcc3deafcdd15e0121" +
      "02f76bd5e20465d143186c4e91a9f18ab3df64f20eaa55b71da447e72dd5c970b5feffffff1831473ad3fdd2063764" +
      "dc24a9924db3828f6d15e94e52a4a45a789d7ae5489d000000006a47304402207fbb3152fc34283313faf172eb31c2" +
      "5e94600fe52070d8174caa8fdff2c7cb3502207282e08823ef584f8eda3be329d7ba0639088fa8470e38fb64c2e5d1" +
      "a580de20012102446d51e81def8c9ad2a879db8e668bcc549f62444e16018c02590210bfee8c08feffffff2af8092e" +
      "2d37526abf2e4d760911a9035622c5cac99ab5b469a5d9cae9540371010000006a47304402201531e625be42b4b54c" +
      "fdfa8fcfd71394690d2c450f4fbc324c25c15caa92b60c02205b2b8121ecb51142691d111a3b9e472208669e94467a" +
      "e87d738a073051bbcbc40121030e476bc498c63d28e38e65d34aa910e91419c61eda518800b85974bfc5764518feff" +
      "ffff68dc81faac65d6fd22735301f80a1eeb12f324d695311e5967e427317ee01084000000006b483045022100d50b" +
      "6b3394c3c5a218731e779c6c2446c580ea23734d44770f55cc8c376f34d70220519aab77b24f802d549ffa9543ce8a" +
      "b11be144b387d3c2e2ea46a20207069dff0121027935c0d9d4bf6dc3aac9038be0ae1126df2b1fbb259bef8fd3e2fa" +
      "7bedf8a7f2feffffff32d4a2da237400b4e1165fa1827332b935341e40e60f2457ccbfed5ff5ae98d0010000006a47" +
      "3044022047cdfc14f7f90f3688547591cdbde2713f17d154d0583d7867eab231c6ab3f5502203e68bc5fef9727abd0" +
      "65a70efbde106c54ed2f390ee3da95bb1771f4ff617e12012103ee64d67c5a7ad778a824a7533f6ca2e80083b0eba3" +
      "1a0438ee1877daec13b8a5feffffffc929f46fa2fdc7d4e3c3e639bc557b44ae4349408c6875566de1910487333574" +
      "030000006a4730440220100860e61243a5ab2a4e0654dc7e6c0832f1b29caf18c782c86fcff62617c19d02200306ef" +
      "e1cdb6d46f5032a538943739f708a80ac8e3d57158404dfc5c77c80ca901210346f8ec18c23955fb1b871d00fd85d6" +
      "4d46b83e9d9b8f8440b8bf39ef38b2e8e1feffffff7f652bc0ddf7b2a96c6fd78df9a55f4b18e9bec8202b87654d18" +
      "5628a61d4d07010000006b483045022100f1a61a25a681382dbf528f561a6a9c0afc99649bbeebe1ecfc0b07a70ca0" +
      "931f02207db4727b3dace773822acc308bd3f33a1eedc26305d00166ec53ef6c157cd98f0121031637597d36778a89" +
      "2fb6d783997c13aea82244de6baa3c0aa967200def4588f8feffffff85757628b9d8dc449f6de4db378511e3256151" +
      "b827c5bc51503091874c566531000000006b48304502210091747b9b32bae1ee041584162dfaa55c9040efff1bd341" +
      "744d0de2dcae1102ac02203b6014013d27dab4439337e1da9d807634b5da1022bb16fc6a1df242142c317c0121028b" +
      "71ed28a3a8b0d3a7e56d998a328cfd659e76469202010f5a5065d0c0c54a53feffffffea090854a49d1237272f6d31" +
      "34ef423f6153c6f265148d99c0331ff50cc51b110a0000006b483045022100b50493b370156b3357ebd593eafb9548" +
      "bfc54bc2eb74c5d44405758a10f84fcb02202e91ffff8253f246972f2ce2a71dad4da3b2eeece916fa187d42f950ba" +
      "aae3e0012103e23b6e5ac81b0df276a06b884e2906559a274679271199117e37e96e92c45f71feffffff69a1965aab" +
      "9d9e7a5680b31e2e33b9b427c358036ecda34ce0c41c864f009d32010000006b483045022100b69796bb175387a0a1" +
      "b6c5c9a31689488433d3f91da9fdd93cb2d6e3ca03cde602205b71300b59e610a61ef172d708756ff23a58e9b3ba7a" +
      "610ead535107b88765100121036f1d3845f8b4bc2d086861f98fbc3f8cf5be9f73b47748dfcc021dceca70aafffeff" +
      "ffffee52e9a3baa672439202ce16ef3ada8d48e982b5ed08446bc3c3807c23103f84000000006b4830450221008bec" +
      "0bc1ff2bab76bfd3fb67815311026dfb8cf9e0366593cef268bd10ced69402202b9f54eea1997cfe40825a5fc6f83a" +
      "2a2bd0eb34ada17f6b8ecb8888e62e6a580121032aa823fd6cfffe2608ca51e2a17df1b77c57e8d03617732c2a1cd9" +
      "8edf391b1afeffffff6e7c53635b9199d156e4a04de6a21a0fc15f0362d3a5ef1170075c530685c9c9000000006b48" +
      "3045022100d410c90b121ffa6e79e6d45f5c6d39bc147a8735f7109459e55b0a655602962202207c40c663aae50a06" +
      "458c05cba629a5429c6bd2c55064ebb9924e895b16d922200121039a4858fa8d3b97bde6b0f6ecc45cd53d41922c5d" +
      "50db7d252233f80f25f592b0feffffff89f950f5b4c244fc0455e3dfdb15e3ac1633efbf1dda70a1cc41e95f32ecae" +
      "bf020000006a47304402204cc76c07b78b95311f4ce94af4b43b2cb5456392e08e66c35b02109acafc6fdd0220148f" +
      "6053ba3c5b7d1233ef06c5a0ea8d63478e31263b5043a8942973fb359d9e0121021c85b288d231cf67bae13098a0d2" +
      "3f32f00afbe63e5a177e5d5c90e890c04323feffffffa33d90f515dd65a271d653160fea872740c9cb77db35aaa418" +
      "0b2bdbfeb12512000000006a47304402201c142d3646a9f45f593e4c37a43ca1ef7a93eb3c70fe5b02d7cf10fd50da" +
      "f43102207ec83c8e2ad846a11a33b88bd2651e922f2e1fdcde874284c5cca5559aa513320121036e5d91403a70548b" +
      "4a1aec97744e3b36788edcaac23cb640c6ff803294849bc0feffffff311309206963abef4259db1c3a0c54b1de57b5" +
      "0383ed816ae9635aa3841da932010000006b483045022100adfeaa95c3d03ef5cc54e05d08aeef2367b2d063a60c44" +
      "a5fa2adc7b90f21a3b0220590bcdae958834d194810fa9d2627d0920e6e89715e28f7bf372c6c1e6b744af01210396" +
      "4bbe0fb540f31fa9f250e31c3ea07c755fe82987646b4e878f827d2036ceaffeffffff08f4eaf97f041ee5fece2e4c" +
      "1f21fb7056fe99c262c874ed34cd95cb6905b715010000006b483045022100c337a18d6813bcc48b179cd9ec3d7ed4" +
      "45240d9dc2780e0e3b13db0e9b71558702200b8a439e7989837fe97fb853afd948477095212a0c6f946c1041c59596" +
      "72a8d5012103ae58c4f4f0639da5a965436255ab7d06e05b011d59efdab558e961fdef621fddfeffffff0242420f00" +
      "000000001976a9144a6176878ac3580c0d3d678a0ef53ba8859ca71288aca0aaf500000000001976a91404b65d16f7" +
      "5d7ab1718d3d373348fa9b1b99bbb988acd9580700",
    txid: "1c96fd43ad734c2b3a68f18aa032a44443014391043815db36a4604d54c04646"
  },
  {
    raw:
      "01000000ce2933478740dc57375376e14e9ffe1d111b8676a5668e308abb353d29aa70f081010000006a4730440220" +
      "12e6c747f5fc1dff101443ae086ae6f1977afbdddac7a3b152ec5331a5d571f2022007bee5de72e07cff847dd08689" +
      "bd443e1b8a9b3fc7281be1bfe6a2573a03194c0121029c2b988cd2b61c9c82cf6a86716c7b8390456927663ba5b7b8" +
      "d2890dfeab1a3cffffffffcf2873ea6e728e7b4cbd5920245b636cbb2e4dcf28604ceb9046c6d3ee84d66a51000000" +
      "8a473044022072ee6726a39ff79f54f43ecf4ae4585c1f4efc0430c7ae2450386315f0c8f5c4022037c3881a0b1517" +
      "8986125ff6dbc8805f2033c6222378b8d5ad0d30433b7b366a0141046a11580e919a254797f72a42c52777fef4f7a2" +
      "e0dbee4eabbb5790c52427f0986cdfe390b11d12a79f072389d37fb753222b23c5ccda336995b22de7733b60baffff" +
      "ffffa1b55da6cf64dbcaf02106d2505ae0501afb6bb6e3af3a3423f0cb8f89a7f369960000008b483045022100ff51" +
      "660f6b352fadc5c746e7eaf08c9582bbd585d19a04547407c3c91af8167f02201c5b0b0af6b8bdae1690f2116933f8" +
      "5006b93873a28d663edcaddec2b95109cc0141046a11580e919a254797f72a42c52777fef4f7a2e0dbee4eabbb5790" +
      "c52427f0986cdfe390b11d12a79f072389d37fb753222b23c5ccda336995b22de7733b60baffffffff6be02f8013ed" +
      "4f4b4e1bfd50c65ee6b9dd2613b5d3da3280d7548486d52465b9580000008b483045022100d77b5fd277070395c841" +
      "ae98fa0ed5a9d0e12680dbc859a81b02e980dc75059302202682ce225b3173fdb44749340a579ffa963cad7da74c2b" +
      "eef8b22fb8414d1ffa0141046a11580e919a254797f72a42c52777fef4f7a2e0dbee4eabbb5790c52427f0986cdfe3" +
      "90b11d12a79f072389d37fb753222b23c5ccda336995b22de7733b60baffffffffe2e5f844340288e1bc376121898b" +
      "f2be8e2ad3f2ea2609f559b3d6f36d345747000000006b483045022100b43a507111a0294b2ba98e335769442aad67" +
      "fa698c72547ed89cf851f290f0be02204b2da21d339a1760a9de291e433afcf46f1c7eb23778ae9cfd42bf8c8f3a44" +
      "07012103edf663067d4dcfb9b30d347bb2427989d3a699a221b7807003be5479a6ded2b1ffffffffe2c95caa5dbc1f" +
      "75239321005756cda598d5ab8b05fc6a55f8eabaa393fb43e0000000006b483045022100b6b5918340a273ba14aa42" +
      "3c2de66cbd7d8de96adfdbb4b1cd250445d78cb07c02202f25afc7d0a517983040b580991b21d5b2dcfb38e849c544" +
      "22c68cb8cbe6ba010121025768780650e60f91e5fe68b25a1be49d1b63836272fee3177935a68e6d09ca0effffffff" +
      "faa8918600f896737e902d0bb881e37d8b4266d6782ef799d0eb525386ce9112040000006b48304502210093f96897" +
      "aa75332d091ce65dcb6c2ca45e84ee991f1ab5d8373d82dcda67cd0e022040b12526751f79fa7ca39f491fdce58d2d" +
      "3d6ece842bb3334bb8ec1be6dde2630121038c90ba5618d7aed7d31df6082f17d21324d82a5a61e03dd9835744c532" +
      "603519ffffffff2749cd1cf8e1d5a3f2ceab03aed5ba1ca1d09c023a338d38b984e5ff771bf989010000006b483045" +
      "022100bf845cca5d24ffcc445849bfbeb06b9e56888a916376e09303546ac9ff2baeb802207e25b955d25e999e2be9" +
      "aa1bbf88a790dc17a48bdcfcb77e6201a8ba84fb127201210375dcc65639b9efcc7175b212e3789004299adc3fc9c9" +
      "a5756d221e1ddd3aaf2effffffffff23fbf8b33cc9122b66a92054cec15dadfb3292dbd7fa80e39fe229f9731dea00" +
      "0000006a47304402203ae662e7440937201b3345d6e5ea0836fc21d881cc136c8c43437c17ef11beb30220031d13d9" +
      "ddb1f870587ef1a20c5922dc78f31eb58f77776cabb2191a98444daa0121033b5446015d7242e423de570f10dcb104" +
      "520e6f4403a34507ab6fca32ef6b8addfffffffffafdc3257c991a0a788f549a0e7e3ec7bf06ac10991e6a3d68c79f" +
      "689ac0616c000000006b4830450221008d63908d97481bde2c7f527aa782511d3ad7d1690770e9e61257976eb6a6bc" +
      "80022016332b14db14f3a2e7d12e2076ec76269917a345b44eb7c1775fa9a02ae544ac0121035f92ff60fe8ca45129" +
      "cf5e38647d8fb5e3e9ae48656e9ef43168c98ddd683c42fffffffff16758c6718e1d729734e3d9414755da16c2a8aa" +
      "fad823e0789c940327e1ae24010000006b483045022100d0d1a749c5437d3a45c4e11a94cbbcc0f832fc45f1ad0362" +
      "ff8add1859e224fb022069d989b573406c9485ee289ede3ab2d6013d0369a5414bdf3834ad5fc05c4463012102575b" +
      "b1bc16ccd6e20dba91268aec290e23edc5d61b36a8b42e5d4fa30fb1ef7affffffffe67c1b66db701350fd613fee5e" +
      "09e11cbec8440743a6d8d93a6b23f74e9e7641000000006a4730440220641ffbc39c2fc57faf5d25a99de111e6938a" +
      "da21c14afd9dea7d263fa52a82f302200e2aa37df1eba42b35796c6adba7416ee11487b0e9379a43099fab7b02dfe3" +
      "150121030c6d85e9803748ff1990b6e8b5150e137962b59c1755c73f349ec247e01f5f54ffffffffe29a8f031db1bc" +
      "ec16d0e70844899fa0aa3641cb7f0fd6285babc3f40374b436000000006b483045022100e2af54b6ae7a3b2305348e" +
      "bca4dd4d546d02afd60d35e9c60f0b0a323adcf7800220345e52cbb92f94c85231c4ed663d5589713828a0ede1faa8" +
      "eaeeaa86d4fe270c012103dd905427787218d7a6addd81eca52b1df4372aaa9cd716b788ae4d8d7ed735c7ffffffff" +
      "e1c63709afad58eef60e0bfd481175408bdd06dac98bf973400eccd441492f3a010000006b483045022100902610b7" +
      "1c1256053ad81915f40202060ffc989f02f76ed91d49b15c9002a3f502203ea97b0bbf8ea74096a26ba54725ccec88" +
      "a3bc02ff93f6130981a67aa809d6e20121035f92ff60fe8ca45129cf5e38647d8fb5e3e9ae48656e9ef43168c98ddd" +
      "683c42ffffffffce6f369ed92b1a8a7c489b95e5240bb281783c09203100654ba67d45d5da45f9010000006a473044" +
      "0220449be24d85fd3ebac2fe7447e637a025ecfa2b34765cd0b46b02fd363b0a6e700220664f2c35c96a5d821f305a" +
      "a9d610f7d8a7c1600fade5eb2fbb5436b106f8e508012103e2eae92c4d8ed30b9894d71a490d4842c9be7e297ea05e" +
      "15b386c9b1b624ecf1ffffffffc6f353e1dba078aa096fe14060518754f4c0306e5c773c8e867ede4cafddf2d30100" +
      "00006a47304402206c065d00524cb0e23d0f823c1288753fd12fcdf6085e08d6e1938ef78c537d0f022071f38d7559" +
      "13c40f81dece3017f4ee6d0e27e74ef7d4ba50f9fb2800de28c256012103cd14474e84533817038f2feb9374eaf7d2" +
      "1fe8ee660c90b9df37403aae898367ffffffffaa64471e50bddea1de7b765d8fff7e0bf1f6076a5a806d977a54c0c1" +
      "c97417151e0000006b48304502210098ab5f761e14372a5c35c233efd1288101df994a1da0f45378307f4c1f20dacf" +
      "0220589fc0ff878193ea2b9fcb64b2f4e8eab2dc4cd0e9350be8ec2844295b4f0749012102b846cb666eed4320ddf3" +
      "0b23c4192dc6e0b99001367a8ace5b9cbc1f2e0db645ffffffff88dfcb9cbed75a5dbc4c75e8ab61d5e4174eb3c0f9" +
      "c0a1a6c331317906c6f1e7010000006b483045022100c519bd44698a46412ead83ecdf50bc87d1eaab8529426a3280" +
      "2571c84dfa122e0220124d014193d4fdfd71df2003c5d332e719786211559eeccea74c98912f964f53012102f270d6" +
      "01d6071f9bb176cbe316fca2a2063b7082841ad73fc602a1e53624eb72ffffffff87e2fb1dfabedcff40d6ead52ed5" +
      "c663c7a898f8023de0571e3b1eca49d020c11d0000006a473044022000e8881d97a72654636d322263a75bb24aec9b" +
      "84c849482c812d47febf93435a02203e7ad943ed12a063d6f21ac2b60f911b9ceb2ada3532b59683cfd7e27f44afd5" +
      "0121030c917d0464f9b6d8da6ea7bacd8d6d88d6c494b934ed7015d53231357ef18e11ffffffff828e6eefa4502c21" +
      "d6dbdfd84e4e6c5b9dc479dc993df6fdc72dccb772f2a6fe000000006a47304402201f5ae470b54a2022555196707f" +
      "ba84625978f132c26e9df3e1cfeeff1a5a7855022050c71d23cd0869b141768f8261f7c7b90133bf68bbd7d62c3a8b" +
      "d82216d4ea3b01210243e4ff8ac88c1f5e10fcab4bbcc6a27f685b1c434017dfa12c9bb62bb26ecaadffffffff803e" +
      "4a03dd7082d2999c66e8e3af02f62b044c458c20754c9c1bde0f1876cebf010000006a47304402204cae942ff175c4" +
      "4a5c88695c13b1a7e736411327f3e043024f5f0e254c91cdd102205392bb4861a2ac6df25ff93e76b8fb60af478551" +
      "e3424dd747dc1e3a4ee940ff0121035f92ff60fe8ca45129cf5e38647d8fb5e3e9ae48656e9ef43168c98ddd683c42" +
      "ffffffff780f07ffee0467b3891841f5e5ae48153939f63b25582182df733e8b1a1f8d20000000006b483045022100" +
      "83fcec3073724462a378578323c60d1a04a1f7e94882ed5ece29da85f15a211402207c64d39cb4fbd3df66755f01de" +
      "b2c891ac551898b0dfd469d5c4d04fd7379ee0012103eceb5640d8c4f1e39a4df464eb0b7bf5170f8ecb980e480c18" +
      "97fb514ee13c81ffffffff744b8b77acdf0536e7687c482d43206eaab048f82826735269676f01b3c81e8801000000" +
      "6a47304402203879a7093bb6aa37a030c1aa93fac102ce45c3a8a91b9f2573d6f5a1acfad7e202205a6ab20e117ecb" +
      "f5b5810a8e8f3ac29abf9c02eee0129fc198cee8d9d5ff50dc012102e25e52f14a66c36add8ba9cfe7f25ffe1a7b01" +
      "1db006a7eb4668915877c5953fffffffff735efe8096cdf4bc8d852b961856eb113ceb5ef1775af5a0e5953ac86794" +
      "6aef010000006b4830450221008dff7196bca99620f93b5c2dc319530b935aeb5395e8b9b3990b3560e3040e050220" +
      "0f87dc44249794dd4ca6ad74b8d595d0b89c7347a3a15c42efafb62cc770f1c9012102f270d601d6071f9bb176cbe3" +
      "16fca2a2063b7082841ad73fc602a1e53624eb72ffffffff6f70c7455d8d64a4dcb0667d29bfb58222d462d5e958a5" +
      "e67c5c1a09346d0a92000000006a473044022054f4c6b401721b056d2fdd9928f427e979c9fdab4d1bbcfa0f154a0c" +
      "7aab771f02204db89677a2f69c71f7ea629c723c1033f70e7a3fa12942da56f27ac913ab6ce10121022ccaecc6e261" +
      "9d78e89d9333c7db99cebf01aa7599ed4c1c3b3ab5a9bd3b05ecffffffff653e88c0ea22569f4a68537d95384f8530" +
      "c5736e68881cf6ef361de24637ea46000000006b483045022100b1dc1aae1f1bcb880786c0ad54b12d9a3b2e5ec60f" +
      "5a00d45b386cc4cbcbd5b4022037efcd4a7814a25b82786aeaf91402de6700a98aa7eab2e008532ead90edc0580121" +
      "0388db801d4d29987a8168bffb6b4e7be59071aa3e4b44175074a66cc7cdebe0f4ffffffff5c60f50d38fa0e8efc96" +
      "483a0a9870901d2efc4bae61ab9824c5a6a30e6d26481f0000006a473044022053a0f580ba786ac66afc6e92ff708f" +
      "18bc0c9750ed6bbcd7b18729dd69e2ee2602206f54ac4e4dbf735ed139cb0e383374a13fca22ee2887ca9604b9677e" +
      "848ced60012102e3bcec09d163a01e962ac707005537cc021e118647a0e43f9c993403b1a0189effffffff4e7f4b57" +
      "21ef777d94862109ccf6bf8c24d259ffa86ef0c389a7dccaf45ebcd5000000006b483045022100b55b6f688c873617" +
      "e2809c502b8a26d31f8e04e4bca512957b833f0ba55ea4b50220144a69d35fc7895fbd32b3911c2c6fb10431046d03" +
      "f2d9454369fbff1dc113f7012103e3042bad6656d6c07aec1f04e490d90d12712ec5b9c158749b44e769dc5510e3ff" +
      "ffffff2a3ef526ea295368d9b6410e493f31a68caf802894f59275247a1b207a63d91e1e0000006b483045022100f3" +
      "a68dd66df97b49808964f8d27fadf853f5d9de19f433999a864617e2f196d302204b6bc12f9349f03e0b28db3b114b" +
      "9901b69bd6b7eabc129fa1246de771e54001012103c0bd4d4155494e84e6a4924131c62b27fcd2f0872276702d6a39" +
      "80286c059a84ffffffff26ef97faabc38af50b8bbd2f20b74d93c334d6d219a70f2a1dff9bbff5277ee8040000006b" +
      "483045022100b0ef76a1b6831952db9a7a7b5dc8d2ebcdb244f1186b3f42d4d0f5fe3ec20089022071e35f706ef8ca" +
      "3eecf800a16df02617526104a0d92cfe0891f2f2b0060e7d68012102fe907185a97c0c2db127c31127bb19e14f775e" +
      "48e61547315b222125b0cda07bffffffff097205c04213681817f8eb872b8cd3443a618b18d08ef659809fb0610c14" +
      "7cd0010000006a473044022046f22b91fbcfe0865fb35358ccc7c976204413d7d5977aa98905be35151e7dfc02207e" +
      "e063fea961201b805062de95910965e518fbd9e9b94ae73027f56890586c19012102db515e6c95a1d41a3cd5f9bc42" +
      "b1934ae02956cc672425e83ab47fd8b89a7e09ffffffffe808824a87462d232c1b5058b03d3ce3495693145bdf90a5" +
      "347ae1af60b6560a030000006a47304402207e9534cd91c6842eba0b61811fdd4a253baa549d429a2fe39e937e12f5" +
      "c48827022034fbdc4d96a0033c39903dd16a26998a51e048f9279a09cd24f6a42d99dced0701210363f502233fb4dd" +
      "3fc4d9c97e7f518fae524f2ff54b43251ca0f25f1fcf0b5a03ffffffff115b0ea1e9b741b8c0bc67d83a93d2559af9" +
      "b4b4d1581f49ff44c4e70cadaedc110000006b483045022100bfacf4134ddb35bba7524ffc5c2a44cb8efb28a440a6" +
      "708351805e40eea4e2260220633a7c9b215cbd890cc4a0124650f8ea486825e211517c4a28888c859bde6e57012102" +
      "9c6abb2073a20c4c111de6038a286563a28af678d25dee5bd8a04c279e69d410ffffffff67cb088da8589db1cdb91c" +
      "ecd0d1565ee860d366447c2f82fa7140b737bf41e1100000006a47304402200175c64904073e5bc0b3caa808fc92f4" +
      "f8fe5d5d5528439fe73072f225bfa6c402205ccf707991d509e4688a475d7e28d9a566707971ca79b9a68c107851f3" +
      "39ec7d0121030ba6ac06ae350517b490e33e13fca0dd119697243520600f50744cc33e9a8487ffffffff7cd7fe7e9a" +
      "e7c7bfb7b533ab9289d58f6eb89b3f726bacb8abe431d2754fe9dc010000006b483045022100f60327a91a9e28b7de" +
      "67255c7bc132f564330e924e14568fda0626ad36ce967902204bad1624ccdc8b2354a9825f26e5c4230c459f10829d" +
      "b5187df13853475affa90121034801e6b007df5300e3639d160a3e40fb0dbdabfc15e7a016563778d7dad0a07effff" +
      "ffff336f84e4bd0f2adea6ac046a203267dc8154863877f53d33feddda5def77dea7140000006a473044022062283a" +
      "169011f470210ed8bd58b155fc58b3d2a43604c89fb5ab31dd4d20535c02206db0ba5cb875bb9ea6201a7eb8dcb117" +
      "3e8b12663c23305b8f3e9cadb5add7130121027c831c64a2f997b5ff6e66531a122d154d8811b01c2f484ff0aeb050" +
      "ebe722ddffffffff274963ebde8ab64e3698c42409d3f6f3ff65d108e93d9b99b16dbffef6d6b9e3010000006a4730" +
      "440220241324e14a5470a74b1c2fe348646241ba0f60699cd63a2ee5fd65990f32c01c022046e2312e45278c5ce287" +
      "47809853434eac68b943f115e6c55429dbc794a18997012103b1e441ba11445c092c23986c1d5ed01bb348e3cc7456" +
      "d70ca62a25d9aecb99fcffffffffc657e495638e25517545f1fca8939c275c138b3010a50a22d972ef822714554b00" +
      "00000069463043021f36e281e782c0c0c78bb7b97ca150dcf47a97a2aabe135cc4ef43a031a9a76e022038854a2efc" +
      "8e3acddf5482a3e444c000a6cea8d0e89e2e2ebf1052d5dae983ca012103c498dd5505b5fa0907eb12a9da2f9b3eeb" +
      "867e1e5f71f5971e0b94ac0008298dffffffff22af31aadc185ca485db6614a690c455fd17bc6fc165168ac1fdeb79" +
      "7f77330e010000006b483045022100e6187688aa45133334fac6b38e348a5071e231b248fa87b60cab5db8a3a81ea8" +
      "022026782d5b510816b2fea8002460b49007f19d2a6d8c40c9de9a49efbf3a3173e9012102061b406e4a5249007934" +
      "58736bf40dfd93fbf2a2675813b98868625b31857e61ffffffff7e156a9ea274f22a08c048bee809159e5d4743e6cd" +
      "6e38549a08e6c73421165c100000006a473044022033d62ede15b4b07d11a2ff9d1d946100958e7d85496685354615" +
      "226dfbbb61c202201c69a757d44bde3cacec512d5cd5f3dea9e10b43a3fd9f0be3242b8b156a0028012102b9e1fe33" +
      "b1a3694aaa3f93cb33bbf8404a6b7134220c5210c99b97e5b274d69fffffffff8796a6b0c98fd75f0e5face9526f34" +
      "e78baeb3b8b5189b7eeab2eece93a0faa0000000006b483045022100ba74a7772db1c1b981cce8cd15d662d211ec19" +
      "95ab95c73b5f4c64fcb24ee46b0220604102625961999de02870672d29ea45476325a1c5374741e29cfca60baa9545" +
      "012102fde771681701a7e47e1842ab859ce065fa92c53e0f13a5278d473cb6f4bc1611fffffffffb0b99d26e5c5e70" +
      "118c40af32f665a54a9100cb1fcb71cf164ce7f2c7ff22e0120000006b483045022100bd1710a03783c790b333a47b" +
      "2d5c88509d51fb2cc0e119679b17f96850e26c5d02205a9adff3697ccaffe8e409248f76ff82f6ec754babaf35296b" +
      "cee8d1bf10c1e1012103c21404650e0fceda248d4d6b0be284825d3df847a92243588ad8763ee5ec0908ffffffffb3" +
      "47f3e5b8df109d69fbc87311e5aa53aad13e9c096b5168641e606397ec104e000000006a4730440220377ba991afe2" +
      "767f9ab022d4dd0139d5132f490083026826e71f12ebcc78f9d3022049cb99fdb3f6afaa40e40b6ef8789d8e157aa1" +
      "84429f48372df8db4ed5c832980121021117fa19267f9fe6f4341cfca82421606775a3f3e4b6b1ae604ca346af598a" +
      "cdffffffffe89e40c7b08e8fb7414c4fecc5276e2ddfa1e5b1ad37890d9168bed17a5a41a0000000006a4730440220" +
      "640efa8896bbb04ee17603f1d6c0862fcc58407e9435144e36d109f4c3d65efc02201de4a741dae7e82b1fb01ae41c" +
      "f537f130260353334c79d4f5cc355071ac0c420121030d75fdc4827ca2e0a19a6e1a0b525299f887a0ce3b84d22810" +
      "d4c17ec53ead4fffffffff2cfb19add36c2c4b61ef61e367031203aea2d7113f7f60f9de98f6d1f4657ac601000000" +
      "6a473044022043eacba3b94fd48894a1f7ae226b021fb82a70a5503e33208e8c67fac0ccb58402202cce000622ac27" +
      "977919de7ce52a6d0a5c5c080f804e43e067c3aef45dcbcc8d012103aaeee1e8514641607c505709cb30d3632d908c" +
      "77bdc078f1455eb20440fe4831ffffffff20eecdcc3d6f0b29cbc5394172230485ba081a2e2da31115e85c29aa2f5f" +
      "5a23130000006a47304402200ad02c020d4da0d08ab83e6b23a0afaf2359d4f5c9374aef3662566371e91677022028" +
      "f044ab20da03b0cae8e39d15b67ce7b330941e074de80e0f6138e5f4759f5f012103e23bd805f4f3f5a6ac0882b4b6" +
      "33ca9b68c06603760da50a2b87919cc7c25efdffffffff90628d939f3ef3d8b500a4df5f5a06f677418153dce9647d" +
      "042be2a4bc948539000000006a473044022070cc205ce9461b7f7805ea523126608740db8dfaec5562bb96f888fe62" +
      "4c8c170220732537bad6f87f7e18f2d86750cfe17f6abe6b54cc681c402c4f04f8bd17814c01210240557ad705985d" +
      "a2c9dc68ae777b4c95da867d81d9e436417050f31f4e9b2e94ffffffff8540c2c5dd496cff2a8d59347331d49b8144" +
      "3a331df2866b7ee2760febfaebb2000000006a4730440220356054e84d418f21d1e78fe7c4948a25f2e246a897e08b" +
      "6a833c63cd372ace1f0220215f0a01e82ee2a643fd82f1c883e12eb1e21fe4519044d9ae533975546dbf0e0121030d" +
      "ffd7855bf610045f539b776eda0de7700abddb513f27f6650a4b92537210b0ffffffff6fcdd30583ee585877a5cbd4" +
      "735c65318fd573ca6fcee06a863f87150b469ffe000000006a47304402200eb637b8f3030a1b582f84ff927ab063f0" +
      "d94eab5d621410d7365292139af0c102202e57c1fb9c606942bb2a899561a90ea36dd4a424116e3656a9a7640b8307" +
      "b4c7012103dd11ae72c10b41173e596420b02ba6503c76de968fdbe6eda54ff2bfdd42e975ffffffff20eecdcc3d6f" +
      "0b29cbc5394172230485ba081a2e2da31115e85c29aa2f5f5a23150000006b483045022100fc9a17507b0849e06ba2" +
      "ce72f4ca5b9bdecdefbe25f9ae6d52e4bf4882a9dd3302205a58f744e127206b6ee9017be926603dd4c467514cde3c" +
      "16ecb75e30da537e7d012103201628cab2838437a32d0f19a74915b2d95ca1fb72d42170d24e56c3f75e93eaffffff" +
      "ff7e156a9ea274f22a08c048bee809159e5d4743e6cd6e38549a08e6c73421165c0600000069463043022047dd04c5" +
      "b4f3423175c739af8d35186934126f52d65537a2fe0c6e689d308ae2021f617dba14974f53cef84d5c6568cec88ea7" +
      "a62230577730715be3f5692bd63b01210385b81a513ec0dbc11524ee57e2a0a3315a463a2e330a33117171aff755fe" +
      "bb80ffffffff1ea2fd4bd4c408e7161ad45be75c97357a0dc966e9985ec9e7138113ebec9654060000006a47304402" +
      "20135935dcb7cb8af41986e6fa753261c7933e50b16cd29acd0aa068bfe688937d02205fdbf301778ac0d34829bb4a" +
      "cdc8d05b2b27187ea98680e16eb16d7c7f5bd022012102cd390b29ce502f8a7690977f5e7f0a5de328bf5dec770079" +
      "e3af7be8b134af11ffffffff2a04d2e9ee8462bd9826f74cbe8192ceac3f6bfd1c4c98f53030c32c49f129891b0000" +
      "006a473044022017264a15fabbc1954fdf543e3489366d645846de8e6eb6db977f5dc11f920664022010f3389b4378" +
      "065515fdc8a43ca995b3a0d2ad09ef4a7cb591acc2af23f6aa0c012103071b8bad9497864dde7d39dab3f071abae3c" +
      "3658451e6ce32e12fe10c7015e80ffffffffffd591d62b829a9b19c94bd5ebb696057a2264ea4ec88c3eb353681519" +
      "355186010000006b483045022100ec37507c4606fe47e92dd391f2cf2f34afdfb1cc1f2230edd75a95fbb2dbdf8802" +
      "204c127a781b279a1975df3b86c146bda6fbd9b8de85936f1be4142c73700c7d8e012103e5eb9b1ff188884b006813" +
      "b86438e9a112efba40c9b1af124ea28f16f5d82304ffffffff352abd63af92150973d0772798de3ad1b70da09955c0" +
      "f9bedc58cfeca87ff98c000000006a4730440220777a6513c4e5d5b50e3a6fd28dda26a29e8265bdc44e58a1473870" +
      "2588063f6402203bd1d81a127d6e8c3de759ba33700772f45a379b1a1c59baf5d569a519b83efb012102ed6bc878a7" +
      "04d27a435092afba79c1c96727011be78c928631ef2b028b3d36f0ffffffff89b237a8db7654e79684ec8a7495d139" +
      "35d5425039525634c3bfc046c3cd1fa3010000006a473044022053b4f691e88b0f5b311aa454f9e5904259c753cdd6" +
      "535c25599a5624ad4a0fa602200f1f4efef980fe0b0b3135da6f0813e3c468a88e4fc5003f27363cc19506ab120121" +
      "034405c5b887460fb3a9eb0cdebb27f8b233d440e4166dc6cfc95654091497ee12fffffffff2e54f44a44931440039" +
      "989accf7745f711b5bd89cbfd586358d37f666468931000000006b48304502210096cfa0583638bb0d517b870f5baf" +
      "f63696390e772d01e53b7052781a7f677f8f02206bd28138ecfc7d5fa98866e189294cc16eaa93acd1b67659fb12a6" +
      "2dedc85da80121020710dd05cd71fcb344eeca4cdf23b801defe93027781c51e7c7378190537ceffffffffff2a257f" +
      "8f6aeb26b5cdaddf929777ae15d00ccb28803f4408d7ba0102a6d5fa57000000006b483045022100e29b1f02c00ead" +
      "6be96b13483660aa51bbba04af3b9e66f86673e69805161a4602200b8ebe3c69136a7c33acdd1e85fed9ad0e2e0a36" +
      "52698c3a70a7bf87b14541000121034028c18f63faf86b7d192f7b756d7216d777075b0df1af59feeeb69c758da0d7" +
      "ffffffffd1a67ae3bc70d1fb82318a0a58cd59b524fffee25baf88a346c6dab06c43ffde000000006b483045022100" +
      "9ba4555623a0e07c9fd8f91db4d9309c1c467c43391afc9bff9c438327c5f46302204c82b37e4c8bf636d9264c8cc2" +
      "74c5c5d6f8d8607be915f0f0142b2344afad43012103cedd30ccbf337158d516fd9e8c686d114cf46fdcba50ed72d6" +
      "265b5eac8e417cffffffff2a04d2e9ee8462bd9826f74cbe8192ceac3f6bfd1c4c98f53030c32c49f129891c000000" +
      "6a473044022052b78a81e18fcd736cc1bf5845d015ece93ebfb434ac68321ee933fd7b0663f202201eef26e1cc8fd0" +
      "0f05afa9a283f2e84f490e3764fba2338099cf187003b1707d012102d61dedeea5081dee173d256fca1ba008749686" +
      "0db759946970183564220a1f47fffffffff41db88cd1e7fb9204d6ae9d2769742d425df249a38f7eb348992795c4e1" +
      "5ecb010000006b48304502210091bd502e5af97bee4d0668db20fca73002d2c1525e58b6bf8e90002effdbfacf0220" +
      "1874d2a5d8b73f2262489ed209462a67d56340daaea6ab8705610ccc218ad6a8012103b3238f6e5c302106607b744d" +
      "b53f98faa7d229281124903747aa9a03f40c9a78ffffffff79b971a32779eed630ec92d56042e22c7fb01eb4d48dd9" +
      "72b05ad94b9d233a510f0000006b4830450221008cc95e713189ab1eae3262033760bd9efd5802f29c2f6672cf9703" +
      "221428297902203d44d1ea74aec1fa60e9a59ca0bfcab03fee2d0238ee3a8e8b61161767aafd98012102c31b5763ad" +
      "ecc7e309038fea837a0bbda921c849e4b30a12dce8725146e17fc1ffffffffc014fbf1352d3ac7d1c3bc08294128ef" +
      "e6e3a32791d3351c06aad2c1ffc98210000000006a473044022001807cbb6453dc4a17ee8e602d25839342c1c00e5e" +
      "308185986e471bf101f7c802200dc5193b89d0aed31a2e10404cf8ce59d8f1edb5eccb7ca83842771f4cf28fd70121" +
      "02c88f880d8a129d656832f0cbd73e54801174bfcf36ac3f64cb0f181102bd9ec2ffffffffa9c0cad72ca42e8461f0" +
      "a32f0d2dc582a388aff2e3b12dbcd28c2e6698b2bc76110000006b483045022100f02c9c57741f49de0b83e0daf6e1" +
      "0caf071a765c46c14b3b6212edc560d3f97602203975664e2e2553131b72a16b1fef2480fb8465432698ab07dc15af" +
      "cee24c5663012103920e6f44ac66a4c3ba9957d3c603cb808fc8d957eecd3c13a18f6cfe51d1c1f8ffffffffbe3e61" +
      "74c4c2337b7bc2f650380b8cae5ae14decc00495e3a88bfc80578262d1110000006a4730440220576e41da0e25225a" +
      "7e5efb3f641438ffaa4b6530a75a46cefa1be06a84d415f702202a6f26b86c5c2e1b51c40b6ba58577be5955e3ac26" +
      "0f3d96c70330375f7ce81b0121033403e87d4e796f4806b96b0fb3f7ef74cae6d99bcc34deb01d34e9cb236915deff" +
      "fffffff8a47e9222c575446ccfa9064c27f2d1ec61831364a5a8a118c2c604b92a5f4b000000006a47304402204236" +
      "e977c0ffc2ab3c21dcf4ab4f1a1545cdd249ee1d905807b20934e31f7ed502206b347e72cf0bc62ae9709ceab4c99c" +
      "31add1599ca7bc64b7da0a0b404fdbf45f0121037c97ad50a9a405328ca513f823d56e3aa55efb4c6d29299dc249cd" +
      "1e52e7c022ffffffff20eecdcc3d6f0b29cbc5394172230485ba081a2e2da31115e85c29aa2f5f5a23180000006a47" +
      "304402206434f83a1a35bcf1e0faca926b5376f65ef438223dd90c09d43211bcfdbdc20a02207e7292792d137a1c13" +
      "9078c289ca82b18acbd05e4e486bfd0d345b67994c81220121039d86e916c21de66a08edf69a60e82b7d56ce53e51e" +
      "b399c6c0b07298d99ab108ffffffffbccc7b59efebbf276ad35b0fc6a8667ba3ec23c01301f2b9e77221895f300f43" +
      "010000006b483045022100a92721f17bd7aaa41b5258b0deb8307e61e7509cb3dfbe894331cf8ac8b5b19a02200304" +
      "71203acd54bde53b98df0f6a1399198f3928e695f4e11cf8495fa41c1e55012103691ca7060dbfcb818969fe947697" +
      "b7d8f585c49e03c74b4edccc3f30879e14f3ffffffffdc4771307fbdfee29e4e62128e89a0bd3012d6540a392f5988" +
      "e4ef8ae4b664710f0000006a47304402206e40e84f8b2191607cc16e4c7434955608314a01ca1fd5b8c2afc4689f8b" +
      "7a57022065b466f7ba1265bc646e2e3326afd2087d4afd17c737e04e6ed2998a55c096a601210267bcc9128cf2158b" +
      "4c0b68f9249f8b78346479ed2602bf30574e07f5430ffc80fffffffface11a89900a279d9bc8072e5498ac0153edcb" +
      "4288be796a47820bddddccce45090000006a47304402201c57be69338306e908a1832525b01b2fa2e2d61e2e766d50" +
      "33bcefa0a3809be6022023924b8be7f20c6a65832e1e4096544662755d49d8fa957b9462868501ad17050121039f83" +
      "d520db42720855490a50df931116863ed03e7cc8dacd36d992b8d0802a3affffffff7e156a9ea274f22a08c048bee8" +
      "09159e5d4743e6cd6e38549a08e6c73421165c0e0000006b483045022100925c6a4a635a73e023254940c4af965aeb" +
      "6421894d7ce57541ad16944490b53a02204ac934862d6b9698f6cce4ea6632a81db16b8f1077baf4d15b1f227dccda" +
      "860c01210272eb536ab7117ce73da0618ee1e8aea2847557e6e7884f735b4e030bfc0b1be7ffffffff782ff3f44485" +
      "b01d70f9c083f49e2188d9c677574d165e3aef5a2fd1c7135279000000006b483045022100fc3392f056c035459e09" +
      "a09ea3690ab173945e88dee0f98e89ba03f5b7383e29022025d57be7f7a07c60eb1819e3219c379f1a524258b3a8c3" +
      "5c92b36e0b0ea808da0121024e36e6a33466632c92eebf40c2d9cf8eb9c4a036b8afd21825c26744e660a38effffff" +
      "ff67cb088da8589db1cdb91cecd0d1565ee860d366447c2f82fa7140b737bf41e1140000006a47304402207e0dc16c" +
      "30b88b1d213fa6c6cc09058db211b27f524db534072438f406cde3130220328c8ff81016128f69ccc9feca413c463e" +
      "1d48508e5f3e443ccbfdbb1d6033b0012103ce92174f6f741ad61f0c58ecb98f9c900635bf533661a5dcabfb83ab0a" +
      "176356ffffffffa1b55da6cf64dbcaf02106d2505ae0501afb6bb6e3af3a3423f0cb8f89a7f369230000006b483045" +
      "022100c5911d886d795406559a93e01c5ebdbba11b590a5ba770cf802dd6d50447f04d022067a7286c3fbde0c4e980" +
      "931672303b9d2f16cf94fc46459cb18f53ca7be9fddd012103ad585c6bfd29398a58f73220c84f326ddcd202e372a2" +
      "12a3a296a0d1acdb0a01ffffffff3f24997689a4ec9247e11e9218fdcfcbd7831e2a12fc7fa2f3ef06bd9be33fca01" +
      "0000006a47304402201f73e877fb7a4661cfcf110278ec25e64d614ed7502cfbbe918a91f915cea72702205e66fa28" +
      "c17297e524a228d9ae4954b824d82eb031e60d34734b082fb8092336012103dc0c24e3d1c3f151df0372fa27a866b6" +
      "16596cf9adf6e60cd75f87f0b696d228ffffffff8471025ff3dac61d9a66323c12573e738982f777f021bb19350a54" +
      "161f8cfe7c040000006a473044022021c1962442cb60c050359b06ce028cede03a2d367513e58be919f238c82558aa" +
      "02201da098bc2f828d9bfeeb3f914f28c4e6818b3c21d53b658b53a113b14f24728e012102710f78d4898a11e4944c" +
      "d27f8cd3abd48e74b6d721332342553452f52d7f2a64ffffffff33ed4157a29a16b4eb850d8c02230f76cafc4e10ca" +
      "5255b0a5d43a549386b075000000006b483045022100db8874b75e5fb3bd305f2405812430fd60444a27ab101f7b9d" +
      "52a52ff0be79c20220575fc661a6f81bd07320b7b5405cd3b66bd71338f466f12f02adf6cfb48cb014012102e4b4eb" +
      "220ab415940cf59c70010453bc88c6b7c0797b9bc8419e5489646d625affffffffad4c553f7c23717e85b4ab03f681" +
      "a05caa518f74e5e50fd919413b3909f8f4f7010000006b483045022100de5bea3fca6106775b4dba5670d570d7130f" +
      "a60ed80439c6367dfc7ce9b8783602203fa3cb990362ba4c36f502acb47178f52e943ff7e9f5b7e720b757d40a6f91" +
      "c1012102008a7ca2849f470e307eefd8019478b76b30d064824bed13fa6298b8d6812bcfffffffffdb3649dbb79df5" +
      "261aba175d1be7ab0aaa4940561268b001482b4876bbf2b5e8090000006a4730440220166398fa2be066a27bb1bfca" +
      "ac8df630010e65d25e5fc2310906895f54bb909e022053ddeb193965df48a55484b4f25d40c0af99e8067d5c446943" +
      "04cfd7d8a16be201210381f2c9d8eb2cc3796e4f4ddc81e56edd98f1ae4124a20ed88d2427685ef90ea0ffffffff22" +
      "d6672275b39f534a9cd7781fd5080f6f891d485c1068d1fa1329a34ddf2283010000006b483045022100b9756bada6" +
      "775aefd02cf6bd132fa22de7b043bd52f3890e08e1e719d1ad97fb022062e52c835967c57dff35cd78fa7612f5cea5" +
      "9a7139de8a7ee5d73d57c35a88fb01210316684df27e4d1e63adaa93cbd54c9342727026822a51984eadfd51b9b3f3" +
      "2b86ffffffff1ea2fd4bd4c408e7161ad45be75c97357a0dc966e9985ec9e7138113ebec9654140000006b48304502" +
      "2100a5688ada356eb433eb502e08550130e709e88d5ce3b8ed1b2490d0d53b1d6836022029c9d95416fbfd0880044b" +
      "ccad614506483b55bd7a2526f3eec23d70da2fd9a1012103c90477ea6a8f8e25f08bd82c843776d981d9703c3032bf" +
      "166fd1b88dc1a38cb6ffffffff1c5e6806679a975949fe30e7a2514e41d64d1ff1033c40cb3477db1cbf633a2e0100" +
      "00006a47304402201bc93b89aab56cab2871c3b6eb824a88939b41bb9c4ca9c1ba0800d5bb4282b502204c28e93a53" +
      "fd07c4ab5b16704480fc04d243f65bd302dcd57253aaaf953c17900121026095fba88595b4b8805055000e60b1524e" +
      "2a51f69874105f71ed2c3ca9672a77ffffffff315d2d7751ef184c1f656f0f4c5d94f356539b7fee82732d9693aa79" +
      "33d313e6000000006a47304402201964dbd6df4f3ec9f836e9f00775003e48cf2bac52131cce61b19d2a1e8ac88502" +
      "201ba8eb9b84fdffb37c63708c5ba4544634de9e278b5ca83ae2db09a281c4c9860121026aa5e34ed7f45cfa0523b0" +
      "f5c7487ebc12f255eb085913de46d15558e281aca5ffffffffce86714c96c47a6f4310e1c9a58c9036b7a6b44d5f4c" +
      "237bb09227f397d81a030c0000006b483045022100a465d72340959d7099a799e6b709e93839a8281f82d5f5196eea" +
      "92d3e0c4c92202206ddd5daf248173d6390ec51ff12d6dd77a28e813cc0d43db883a3ce95b4390b80121033e724b3a" +
      "7721845a1eef9a45fdb7270a37087ad550e96246544cacb54b96acf3ffffffff26f1a8a9eca675b0698dfab51493a8" +
      "c40ff8f8f4ae5345fb101dc945401fbcd9010000006b483045022100c6b3c25f2b82a82b6927e1a793e783b4f89f25" +
      "bda5107c4383f7083650cefaaa02203ffa2679714e375a5cfcb10a9eb8d6f6242bb9ae7a7eb1f4f8ff95253f9cacb1" +
      "012103d7d589e955608c33edac3346912dc7f5de587dca446e700a786427e06a9f956affffffffb853de1c3fd1ff4b" +
      "5e9393b013861ca5d9a939a00094f098b575ede6f7f91054050000006a47304402200ae16c47f80c95c5f4dbb35993" +
      "11d01efe12f16987fe03678023e37bde8073130220212a8f0e69614eb776cce58e3c180424981b1e7fb47df03b80cb" +
      "fa5ff1fb765c012103358549f6d3603db79d5cb9216cde5725cf97200020d918031abc4b97a97566f7ffffffffbee6" +
      "518330de15a785bd965142569975bdacbadc29a889676dee1676a828fa8b010000006b483045022100b8d7b139a56b" +
      "75cfdcdd76cd5d7fb521a4ee8ccfd73e9b49b317e298b414780102207ae4a4fb63a33d99f689ef525dee56436183e0" +
      "71abca1d495721ab5924725a390121035239a3ef2b0073ebec636f931f2155ea58015f4cca2b2cdcef85651b3b1513" +
      "9affffffff8c43fa0552f8c4804694ffab86200dba9123ea1056a4dc9254cc9e55423951eb040000006b4830450221" +
      "00c348977bfb22b989ddd2db1545ed8023c9432724e4713c8b322cb2ec2db2c21202202407e86270422fe552971330" +
      "637fd26db8f462c80127df490094edee404180b4012102d7b085bbcd11223346a3584d58f3a7f1fbcb99582be94e4d" +
      "5d76ef86a7074d54ffffffffa87fababfaac866b786e34954784cd42366728e52dfc36f9cd7e356db07f52f3010000" +
      "006b483045022100aab1acfec532983b6a085bff8afc0f8ea01b5aab7bcfd72c256379ee81b133aa0220677c7f82fd" +
      "87b82038e7cb84b1d775c3f283217371774ba1766ed41cf0288592012103f83efbf334446e929a073c86b84b3e8e93" +
      "2f9c496f8617024788b6456afb06a4ffffffff990096e3b9d761b67159cd8d86254ea93866571d5894d538060c8e38" +
      "36c535f7010000006a4730440220503987e5b865f6c322464cc0ab07903f688d1174f154416cd59a0c876bc23e0c02" +
      "204e212a6ed61e7c1ddc29e36be16198a1fc8920d8004e59cf6afe95a43255159601210378d665ce019d1343819ef7" +
      "c661a438ab655777a943129cbaa0e28ee10fbfb4aaffffffff89370648498e381598b93580d6df7f1e904226bb28e2" +
      "1604e8eba43efba25bcf000000006a47304402201e358478a55969cbf3016e4b18c8754114cd97166245b96b454e93" +
      "107b9550f1022074780ba341096045cc4c12af13d80f70d772cf461aebfd7bde76e1531c6cd4ec012102675d2e8e4d" +
      "bc3125b9d96af328bbdbe3c3ab58283184665fe377ec7c7b3f9fadffffffff681fc031a1299c3ec0acea7f1a2c7256" +
      "58b8caac7fe2d4f499216f899d00eef0010000006a47304402206859ed7ded0221003d93ba73c734b1332b038f1b07" +
      "4527ff58b40316cf70aee502201bb6a232906499a2055ed67e5afb9d8dfab74181d01bf7bfe1338166ea1a40ab0121" +
      "0216bff30aaa5ec8aca989bcdb889d15c10393b4281e5cbd051543a0e450b12eafffffffff681fc031a1299c3ec0ac" +
      "ea7f1a2c725658b8caac7fe2d4f499216f899d00eef0000000006b483045022100e53fc52ee984e345ccaeaf187820" +
      "cc1e5a54d94c1851a05a2a9e96612964725b02203a163fb5b95d92c8047371032bcad06fb7a400e2d83daecd6d4b31" +
      "6131276c55012103db7074e6b0dfdd73d4b68d9b90b9c807d076042dd473954dfc821d20812ae199ffffffffdc4771" +
      "307fbdfee29e4e62128e89a0bd3012d6540a392f5988e4ef8ae4b66471120000006b4830450221008b40fb8d90d7e8" +
      "581161e7fde273dae61607bbd06e492b2320942378968dd59e02207b3422d3beaa9efafc0b8a15fa80f561aa7d54bf" +
      "d7df64b12c731addf563f0de012103ce92174f6f741ad61f0c58ecb98f9c900635bf533661a5dcabfb83ab0a176356" +
      "ffffffff05ee6d680171d2f0d353d60315963ce864d4c0092c68206f8e973a027768234d010000006a47304402205d" +
      "e9bd473fd8117ae86ecafdff0a879f018b26f710203ebd39cd23f96fb4081b02206b34e384ec2a7ec5cfd31f5b9f92" +
      "432250d104d7434852803910b1e775270d750121038f58d56e3574d9cd01583ccea91236bc96c0256cec547b707d34" +
      "1c0967941033ffffffffa1b55da6cf64dbcaf02106d2505ae0501afb6bb6e3af3a3423f0cb8f89a7f3695f0000006b" +
      "483045022100e6efcdd5f3d04e0263daaf39a0e9a4965b3d114b114d96d013be4c261153e20c0220045a1da63a0801" +
      "1d8f1622885af7acdef947a1c4d13a8cd92448747d0562d1db012103e753ba448cc5bac1b30fbc827dac4480c5de54" +
      "111514be162699c959d2a3636dffffffffcf2873ea6e728e7b4cbd5920245b636cbb2e4dcf28604ceb9046c6d3ee84" +
      "d66a3a0000006a4730440220487786df521a2a1b3093e7b270a2675459b3ad2827b16ad8a45636ba875a6dc802206c" +
      "82e3e605aaf03a10a9d363bfe1a6dde5c20677f1d874050163d05213e0ba91012103104a0e472c39163ac13d06abfa" +
      "66740f56aed6e2e2660ae996d2222a38afc15cffffffff90e00c7cd4d10acf64ab52696ca5ac003030aa508e5b1ba4" +
      "c0548314b6bc85aa0200000069463043021f66da74e7c822e08f361bf750f69264d8740a133c53d29ec0ad3c1cd582" +
      "487702204496a99d85efd0067b6947ac85d938895f5ac0db4fcbbf51865a0bb46902d78e01210291445b8015fcace2" +
      "b1169feee7b7962e9d860ba985eab5bb704c4d828bb12034ffffffffac54e3ad70b7629c519624c62ea48f87873b22" +
      "b518a4720b9a319a6c52e6d15e000000006b483045022100ceb201cf5b135378a6710e6845bcf5c0921e45300895b6" +
      "bccbd635eb38917ba502203ef22c41c06fff2453a597283be813a0eb630e95e5e1fb2082b9f08f6a39ff5f012102b1" +
      "a7737922956ed1622b4f44d2a6f5a7a10c87dcedd2a6b95dea09ca7a6959cafffffffffb0b99d26e5c5e70118c40af" +
      "32f665a54a9100cb1fcb71cf164ce7f2c7ff22e0170000006a47304402203154fd9b5e90719fe6c7dd354376858b0b" +
      "b65dc6d722b42a2c72436b0a1833fc022039ebf6f7ebb73a8bf1b3b4c4fc570d186ca59354f10596b712dc5e624cd6" +
      "8283012102e11aa4f73d19fb664eb6e25ba1f5034d30fb6f934edbfbdd68db093cf5a76226ffffffffaa63fec2d088" +
      "26c733bbd407f99e1eee26785e3bbb54e8905870c20532969f3c010000006a473044022068e3491e670780b21d1e88" +
      "8eac3d03f4b2aea010c08dc21cfb30d3b63e7853cb022076b96c70f890fde1cbbb5c0608ae8da205e094d7e4baf2bd" +
      "1ff62d7613e3d1c2012102bab8f69e2ca03eb55a8363ab2be217ff2a7c61d6396df245a250334e42c7ed88ffffffff" +
      "3020de6192810b1433023ff752e8a64d74cb229735a48021ab73d5762bb89718010000006a473044022078aa4b5762" +
      "05b1927349940e1c9a8bc0fcef5ffb0d1d59eb625c7a8fdaff5a4702206d3b1cb7fdafeb6f633db4d1b41494b31077" +
      "f36fd4cf275600088fadc120ce02012102030d4691e1d09cb6a234cc927e5f948cf897c8fdfd0a4199833e0f4b099e" +
      "8008ffffffffa1ec3b7d9107b7dde7ff4ac2f706b8fb142d599e77ddd0aa484df8c8050c6dae010000006a47304402" +
      "2014121b2220f7089ed1159e162b57c4f83018ebf1d745bf3fc0b23729ef9b1839022079ebd512e40fcc37fb56fcd6" +
      "e3c144c6917d66e719befb49af63c53ff347c9190121022f86c0284fce02a10fef32fc20304eff3ff4da20597262f3" +
      "8eee2c54f2893f28ffffffffcf2873ea6e728e7b4cbd5920245b636cbb2e4dcf28604ceb9046c6d3ee84d66a250000" +
      "006a4730440220799dc640c381cfced40bae4b23c1228b5d7eb9b4dc8671f23b1deeee23f9413b02201643e81f4c1d" +
      "dc4a7a6c0ddf72f139a1eb736e63c321138250472b1fa91fc5f40121034953f778185166b4b560147c304b1c2f0a7f" +
      "e186708057166536febe06dc5979ffffffff37350896da3946e8b5c30b363037385e050550ef9bf7e4327956fe64e4" +
      "bdc1a5000000006a4730440220179cb6c53a8501f089ef8ef1588ea85a9788e6bb3eafceaf7c6c4cff09a0318d0220" +
      "3d82bdedaeba886f252e10eca4a72ec2a174d58ae26c9dc2bcb2a5e4ee4fc19e0121035ede1e924eb4018c344eb552" +
      "8dafbc1bfea232f523f65ea642c615faecc262cdffffffff621ffab0ba09d70343f288c1106eede60e93cb1fd69b72" +
      "b5d89a1b93a6ed4697230000006a47304402203d2809636d7e557fdc0f16fba0b3beb0ec07ac722e8d07a3c37e58fb" +
      "5b55c2dd02205d1acf0cbb2acc19ff68ee0c663f84f4b0dff09f0125a07d4422ac5a5bb0349f012102193e6d9f0664" +
      "c627ca28deb83ef4a2f3df4abc48a47dd6e9205067959ec4e5a6ffffffffa203081184395e647e31dc72278d3f35b2" +
      "5907acd2166dc555dc702240f4e2db010000006b483045022100ed151d84dc81f9948d0a722a3b9b36c2de9510af20" +
      "1a3d35f73fe4ee60f9bd070220535e14737e7868a4d89bd42b6354f7491fcf371563d5f5e127ac6f3c73eb06650121" +
      "034028c18f63faf86b7d192f7b756d7216d777075b0df1af59feeeb69c758da0d7ffffffff4543f967c96d6e91d597" +
      "cf523448dbdc8ce24907869d6ff1f3e7e918a59a4cef010000006a47304402200244f7cd7205d494f8166ce27746db" +
      "ddc48d3512ce1a3fbfb6af9d1977f480db02207ee8dd4cdaa35d6c724b91b821717c359b8224d55b25cc08e02ea6a1" +
      "b104310001210215c327a8ad2de87a46c5435be1d5ff0ac788b0a6582552303a17eda07a552e7bffffffff6a1ded17" +
      "051755c2ee51d276bf7644bc3a2c63d68cda849e337271636a58c947030000006a4730440220208b3b930b1f3761bc" +
      "15996c54e2ab211e4136342cd3f16f0c855d416bb83fdf022075f6c44a4fbd484d018531ff116bcc242d60bf46d08b" +
      "4d24e6e2360c9b49e1160121039549667994462de30841c8327797718e101fdcf24550e3d7eaea4f2fdeac35d6ffff" +
      "ffff3534f5f4dadc5f8a666c043ad1d8014df595addb5076f590dcb559f0951b1211000000006b483045022100ee07" +
      "f686a4acc62f372177b3f1ffffd44890ccc15f8fc626a94f5ac1e57fd2d40220703c74a8cfc6d3bc2928bc9b7b7608" +
      "32f7ca482993facac6c46a5f35c8a3dd6101210389cd987fb1911136783996bb93cf03708370df1a25b4ee0d42b795" +
      "dfdf559ac9ffffffff09b0f173786a5b27d118884821caf7b645988f90d679c901470fb69337dcea16000000006b48" +
      "3045022100b1405fa467b0b0e6398df7d413f16cabc4294971a316e03020c629333d5a96df02207bec9db7e7247794" +
      "f1f20d889b9df030f3b087398f7314db689464b68803dd8601210375eb24e5289cfe90fcf1cba8b3a1517578fcd694" +
      "2dc5c7941826ab3c496c2a1bffffffffc1662e49648b54014b7966a3b38057f2154a07da9145083bc040501d0b9001" +
      "f6010000006a47304402200b9bf458121397ee106d312fa35df06862e1313985dbcfbac7679f9c17554b4f02207eae" +
      "e2b81974ea9e257177683b400302d73673950c6e4e083d5020950a062ac20121020a2cefdfd593670041d3f4f9cd6b" +
      "1ec7fa8484b90d086131911fde6e5f55f55effffffff4327001f361b7b03ed7cd613e425f7f9490e22b5848d372a21" +
      "000d6147d61035070000006a473044022052d388e549266f114008d6e9eaab8450646db853d36367a31dfe07e7ab58" +
      "71e202201ae7de12b5e251d6f526e04f098497b2c1acccf63ea37ffcd27c91e81b219274012103ccccdbae0e023310" +
      "adea53a80bf0e4cf10ab9ed765e5e23855792c831da8025bffffffff09c27c97bf37b620f4da568221b3fe544250ac" +
      "d4b6239938c7eac2207a923ce4000000006a4730440220078d1465eca5e1556955f6955f5d3f6a99c5b96769d39307" +
      "4f8b75133c5a982c022078a63de121ebc6bf446557ee0cd84cb3e96cb623cb8fec3c31610bf08d2170db012102c1eb" +
      "45fce23199ba3672c06f4f120aba053262fca3b30dce7c40d9e15823eb81ffffffff24855dcd6d1bc08016deb6b381" +
      "9054f570a23db17b41152cdf88dd689b79d461000000006a473044022040affa42b23cc1b87e5cadfb56e578925908" +
      "c323c2071dc0ab30ef95e27e3522022070630ee62efe2d3492f0aab98c0dbfc81163ac5e7145f53480c9855e227d8a" +
      "0b0121023fa82210cdaf720ab540d7d9e8f38f9fda514f412fe7bfd2070a6b15ba6c62a8ffffffff1ea2fd4bd4c408" +
      "e7161ad45be75c97357a0dc966e9985ec9e7138113ebec96540a0000006b483045022100956309e27121a212f8ca7e" +
      "418c96736a7eedf168b48ad49e438b8eeb22ac619e0220270ce979ddc80d431f11e206750d2a512f04aa49a0d8c02e" +
      "e475c983e79012c801210335fa1bb8ac7f426a00f93967a82660069f8e022c089f544446fd02d12463844affffffff" +
      "15911a87f3ee16cd2515d9ef76573ba66703a0f37b99045a0b1540a825746784010000006a47304402204d0ec1a68e" +
      "929e1ecbdacd4a6f1d2dda247f07cf0c5f2eb76d5924c39a4db2eb0220519d3c4d91ed65611026f64237a2a5b0f128" +
      "d9c9736f110d2208d0b879bd9e1f012103968a771681fcbc05e1537ac303ac7f41e6cb9540c9461c30c1d91d9207e3" +
      "7e94ffffffff20eecdcc3d6f0b29cbc5394172230485ba081a2e2da31115e85c29aa2f5f5a231a0000006b48304502" +
      "210089a7b1742568afd8fb7fb02e3a4daa8eebceb9621575b4905991cc5f3e9003a90220324e738db247a3576f767f" +
      "e3a2518ee05c14f20be06cf6ce0f22442131bcea04012102f4fb1ca0da557f2024e69d08bcba7fb8090f24c90cc886" +
      "b3c7a7c1f121bb0b9bffffffff3646a65cb056f6f999e215933944a433b91414f60d683d404dd77c5bc1e2ce4e0900" +
      "00006b483045022100c18c56a53f798f72ffdc32bf5341e503f12905c5e2c08e2e942f2174eb9b55f9022049640b30" +
      "bac1d4cc2b6b507f444652d61650427183a759730a3c4dfec798e5e601210261fbc58954dcca037aa7e47bb31a7181" +
      "362128b213a5ed3ac1861a4dce6a8615ffffffffe77f713317e27b2853228d9ccf277ed8b441dfd111cbcc804e83ff" +
      "c1096099e3180000006b483045022100b6cdab1e298693a6e6e7cd2f5d27a6e9fedf0da41465189d3f26f832a478cc" +
      "e802200401b3358dc8a2a4cd8828d0bc542cfe6869f78eee0641916e765f365bc3b7c0012103adc4833dacf1ae747c" +
      "901bfe440c3579c20779723520a348027906c691aaff36ffffffff91b7aed657c4d921dbce5008aa422eeb669acea7" +
      "952468d2a6beba5aa3560595000000006a47304402200936465db7082b10ed5b7c905402c2d6a280545e911d7288be" +
      "4f494f9de5fdbd02201c4b6a586b823f7acb706978d7b4b95730b5061eeabf6ac9b795935ed2ce7a2b0121038aefac" +
      "eef2ccff4d62b1fbd13c3be86fc0e169da93d1c49d59c0e0ae5bbe6c25ffffffff7b4e623ba1fac939f45ce3cd91dc" +
      "c0944ad1bfbe20193eed27511906c853e1ac000000006a473044022037d6782e56b75637bcd0fa4849ed33b1b5036e" +
      "26c67f8a05948edfc7ceb31c2f02200e6c746c2351140176021c2fa78ea102eee351cd70a7e6f397026ece5fe4ec26" +
      "012103ea5d420d80fffe1ddce3cc31ba3f468072fb4818c0f0925ac28d86abc975fe28ffffffff79b971a32779eed6" +
      "30ec92d56042e22c7fb01eb4d48dd972b05ad94b9d233a51080000006b483045022100b37d6bfa4b9f7d9e53078b00" +
      "05a52ed6b1972e710b0f5075955ab2cc830f3bf2022069aa72ea8ba8337ffb18541ae19b94f5d804dee71688b81c49" +
      "969792a9a0fac6012102199e83ac5fdcfc6257e68289a3c6bc8517a83e2fcdd70f6740104fbdfab69d85ffffffff7e" +
      "156a9ea274f22a08c048bee809159e5d4743e6cd6e38549a08e6c73421165c080000006a4730440220308df58f6aee" +
      "09ea27ec6d1e61b88dfc2f1fdf0e91436c0e027c11f836a490dc02207c1b8b9f0d0ff73c42f377eba1dcf4940c5ae9" +
      "0ace2a95584d74fa4541dcef3a012102b8259de9a12ffcb21d12ed20905864200320f68f8c7c89bd434c40b538fcb9" +
      "7cffffffff76f93d2250f3a74d17de4fe683c35b65308b221026529db7c6c5ad346604b408000000006b4830450221" +
      "00d703c51344a4e5d99c253a668e5a98f8c8c3d1a69e36686dec3f966e15db5bf002207ba372210f9a475c46ec7aa8" +
      "ae2433ed8fac988616a59249741434336fc3916f012102773c262535b96e559f066739e489f2a1edcc3910314cc75d" +
      "0b74c933d0f80dccffffffff9f81869f5053ff9b9598afa40d2844153f1d102bda69e93070d68e494ef9ab50010000" +
      "006b483045022100b39cbcb87695eeb3a9182e20feb47ed89d4e405d9e4eb45797701306db343b6b02206c9db4ba7e" +
      "e8cca730ec4da6b566c7ec44eba0416b341592b6bcdee858addcfd012103cdaa08349dcfd9a0601c63844755581b74" +
      "e2e69c6fde62189f62b435ddd421c8ffffffffbe3e6174c4c2337b7bc2f650380b8cae5ae14decc00495e3a88bfc80" +
      "578262d1150000006b483045022100f78b334c40112f6268067b4edd0d1998edc508c96e15d08ea8f49caf1178cee8" +
      "02201d67709659d266afdff999dec74b0e45e1630ac9adc55e080a75fe5913e4b22d0121025b1eafbf1b272dee331c" +
      "77df9655c3c01f734319db2c043340f6de3365b0f302ffffffffe0d7d81a740127a782a1e42563d50a541a7d801c9b" +
      "022694ae4a30b6bba98f55000000006a473044022023dfae56313f8f4eac495c092ed881654b4c96b2874f5baf1a94" +
      "9c5c2c4cbed502204789fcd460632ec5c0c334cd1ba9a3afac35e4eea429992870ec459e47e0f43f01210234adbf06" +
      "d8e180f4d9cea93d2d0aabc62721e619bba7e82097872f648e82584effffffff61214dc1ea21c6a9d71af348006c53" +
      "29ef36fc90d6950fce6c75dd65ffba49ea010000006b4830450221009c3a9d61a8d38f37d1fe0307d6246dcbf6e63f" +
      "202418b379b833df645ef2b156022056a435a129cdacf2558822a059fea82e015bfe5ab3cc88a17a2908bb4d5609a7" +
      "01210309636d177faf38b149835d69b2361f50e41f0ad028eaa6e4bd35ef726fc276d3ffffffff777e2270be8b52ad" +
      "43cf8b0ea7311de6d52bb01e6e87dcd6ed060744ed457a6d000000006b483045022100eec4aa157ab0c5e2e87876d2" +
      "9e5a3590e50293f99f75962d941bb8d76a28242102204fd03c35dd99f5f5be6809237d0c031b4221aa17ea806b9f22" +
      "1b2d414b43341c012103b20830461e4dcc38218528758902339208d6c8312e7bce67fb5ed6e3a544bb39ffffffffe2" +
      "f9183df0d0b7470608dd904ca12dee784a258120ca31a0e79a876237e6fd9c000000006b4830450221008766cbabe4" +
      "93146aefc9d8439817e96187977fc3ce5da71ee860bd1eba3cd48a02202e96c1aff53c6f94f01e18a77182752e53af" +
      "4ed9bae5f1367f929c4a528f5077012103459b0598764e1553fe39acacf648a4b15be7a6320d57f39651e6ae5155f4" +
      "1fc7ffffffffe3346a0893c83a51b6113579659076907222529cc7523b0ccde9aab6221e29e5000000006b48304502" +
      "2100858b3a5cbe9d6175f8ddbed402b0ff7fdd5d152adf37720859f456947401a68f02202398dc71e01e4b88b09835" +
      "6720e7705c08ce02cfed3158c1712da4156d19a26e01210292a2b1ff0e7b3e13a50b1b5b3e4c7bdf4cab48c782070e" +
      "18fee40e6cb7ca987afffffffff41db912473b477fdab6ff4213976381a060c95dd02fc5561a1a729c95c757410100" +
      "00006a47304402206cdb275c35e4037b8ddd737761316c93e8432139044e95ec902ee4b9ff73fdcd022020225b9825" +
      "126db2a6eb5dc86a8f764609d8cb71e3f926628ed6a4312d6c3b9c0121039b585467c54b93fe7ee23ff12f164ff34f" +
      "c64a5c3e4dd10769a3e7c8c7cfd22dffffffff9c080468f07d728ec4f9f1ee6297fb5e54a7e8c397d666c3ee43c36b" +
      "a5ef064c010000006a47304402206984c701c3da0190f8cef8d51904f0774090d59af129af37a079256da531147e02" +
      "206ac49cb63227dd8768c301b81ff850312946285f5e6486cd79a98a00ea1b8df4012103aa3e08409315635266cd24" +
      "78f34f8b46bbec1696fd558188682a908d1df33bf7ffffffffdc4771307fbdfee29e4e62128e89a0bd3012d6540a39" +
      "2f5988e4ef8ae4b66471170000006b483045022100c4663d8ea74efeb15e68db4f4de849d51efedd71e3c60d1d87f5" +
      "aa60549ef0ae022004738220b2a25da0591b557acd93adda1b4f2046a6e980aa627ad449f91f7139012103b17e841c" +
      "cb22ab123b76882c0cb409fbffaa4a6f1bf9580f7eaf50c2ca0a71d1ffffffff731c88cf949b61bcfa71915ac8956c" +
      "9ef30e47120e8bc672c9b93a1446f2f8e5000000006b483045022100d84eb557bf90647001bdbea30fb45578854bfc" +
      "aef3877356656bca2ca14a280602203734017628d75b4d58b5e85b08909527db3e793912b94473ae69235e5688336d" +
      "0121038577cb62326ec3902d3b4bf7ef35c039e59e141c1bf7a73bfb96b72f067bd648ffffffff115b0ea1e9b741b8" +
      "c0bc67d83a93d2559af9b4b4d1581f49ff44c4e70cadaedc190000006a47304402200713283d38b4a85461bbc603fb" +
      "eebff167e73cfa3e99f6db0592774026682afb02202d15a61efb76e561970c9569111424fb5379382802b1d357024d" +
      "24ec1bf4ef14012103e753ba448cc5bac1b30fbc827dac4480c5de54111514be162699c959d2a3636dffffffff884f" +
      "a19d72e5ac3bf23622bcd4fd7884ca4d1c26cfed8f165f32dab211fa1729010000006b48304502210082bb161f0022" +
      "2ecca9e015089e19f0d85b49abc9c3317aa550592954848feba9022052c2546b6e5478423043b0bd007be53157b625" +
      "4eb334445535580e28223c955c01210213d4e171566425992b8df2f3e97cd8c37acfb551611df37b450739f2b8cf9a" +
      "2dfffffffff41db912473b477fdab6ff4213976381a060c95dd02fc5561a1a729c95c75741000000006a4730440220" +
      "5385d5584a8e79c67bf7f5e3d598fa2d86a37707b12493217684ee850c620cfc022009043dca40f3a688d9817a9abf" +
      "f3fcb7f0dac3dc2d9ce7d07a05dd56dad9297e01210203bd33d1197f59975ca7d29f2deb7ee9f967e6ebfd25ee630d" +
      "fe1f4b9e30aed6ffffffff79b971a32779eed630ec92d56042e22c7fb01eb4d48dd972b05ad94b9d233a5106000000" +
      "6a47304402204b9dc00e2c1e92f38e0fe08a226f9c63ad75cedaf90ca00bfacf4c8e9e14d32e02206ec5d7112399dc" +
      "ee2db70b3f9b730a20d639cca9fdc96390caf8416ca99c9f06012102a6d2e76acf5b5c19004388ea0e8790fb70fb7d" +
      "86c3885e7cb631cb42120e0779ffffffff171b4287f7fb9e18d47cceeaf9bd66f46681d2240eceb14785a0b88af35f" +
      "c846010000006b483045022100d1fdff3aa4478644e83ff9702f6d4c138cd1c926b59f15be9307fd9e520019750220" +
      "4735e8a0498c779526a7ad34a0e5ff2dce55a86c8ce72ec8d9ab56cd9e4ab9dc0121027a2525cb463a7d9e05a1dedf" +
      "01d930956f61ea3e6485a1d0710f91169d46650bffffffff79b971a32779eed630ec92d56042e22c7fb01eb4d48dd9" +
      "72b05ad94b9d233a510e0000006a47304402203e46bfc957aa5b63bc933ee8619ee4e638f3eb78c3ada06dd84415d8" +
      "a32dbc030220234e247da499b25baec817de77033e0fad79c96255502fdb21e9df68dba3d689012102c31b5763adec" +
      "c7e309038fea837a0bbda921c849e4b30a12dce8725146e17fc1ffffffffa1b55da6cf64dbcaf02106d2505ae0501a" +
      "fb6bb6e3af3a3423f0cb8f89a7f3696a0000006a473044022063879fca6439d3c703d712e276dbc2dd97ba3aa261a8" +
      "d2aa3e49339aa65f36ce02202cb584aaa0c9e2324bc62b50e3295f748bdae13fe438a645a7ecaff2aae1ff33012102" +
      "3210491416dd88fcef0ac29587aeae6d3316b5debc811e65930fb4c5958483b0fffffffff41db912473b477fdab6ff" +
      "4213976381a060c95dd02fc5561a1a729c95c75741070000006a47304402205f5a1784829df0b7b811b0216df89772" +
      "1fe0bcf1be4646cf1c2d1c51dce22ed302201034249399b8e232b0396904e9bf25072161b4a08dcc8887cee5989251" +
      "94437a01210235f59da64e4ef422164d33798d70544e94ec2a9c08da7c96c128cdef3effe5dbfffffffff7bf7e1a2c" +
      "f8156ec677c668adef800c00cd5b0c89cb004b6bed27acd98cb528000000006b483045022100e2629394676bdd89ad" +
      "37c5b9a4cb79b657422270921cc00ed058777cc42a56cd0220203e1e5df7488ee706fe736c38788bfb7e370c0fbf97" +
      "8eb915e62580d6b3c78701210254d944ccbcfd0ea5c7d892457c034c2a6ba69c2b114804dc59037e9307b347a9ffff" +
      "fffff4a671b4224f0bddd8f0e92a509ac4338a8011ee49c442b722059ddf87fee53f1c0000006a4730440220672a08" +
      "b64025e71a7c43a14cb0ea05ccc75d3a1b8b837262cf145a4bc77919a002200cd6e409c693b26460bff5e2f0b3ae2a" +
      "4db86763038c72523131d9eadbbef7c3012102f9aa86d1aae9a81240c21d60bacbb16f7e7068353a39392d5c31d471" +
      "455bdeb9ffffffff2a04d2e9ee8462bd9826f74cbe8192ceac3f6bfd1c4c98f53030c32c49f12989270000006a4730" +
      "4402205299cccacb3995bb4f283d88d442e10ae7644cb35e49f0443cc3919e68bf8a7f02201e89ce2f641001e961ce" +
      "013d3e96cbe95c91c41962efcdf49ca4c4edcaf54b480121025dd8d85e50b3b1a2835f9d734d2e16bea51c17e9aa4e" +
      "8cf037f06d129ce9f206ffffffffbe3e6174c4c2337b7bc2f650380b8cae5ae14decc00495e3a88bfc80578262d11b" +
      "0000006b483045022100b68f68012bb570b077b62a4216f1469edbd5d299a470ec6a0e98a1b9382b01f302202a93d5" +
      "78674c1af3585601da88a8dfaf727bbd6e15a8abc01b42872b6c9366c2012103f64d04d6d59c4e779c7a7cc20df0c3" +
      "c0be8f1687e3f26d7d8de3501fb08d1e8dfffffffff00980bfc907ffff7d8ae4c6a1d330226f808361038dc6da346b" +
      "0ba61e66e430010000006a473044022024f0dd168460b7df8b3d5494ee332ae45c37fcea8350901d4c66ba6dc75089" +
      "c702205e57ef2c9778f1423da4b25e230e543b80dd63804b83e8f8579855bc88a5a708012102df9216fe0626af44b5" +
      "bdf49c8b22920dd059722083027167a763517db98c7670ffffffffbc46330363eb462ba829ba36fa120de5a76d20e4" +
      "eae88528804c7786a762f86d010000006a47304402207444f080b7159883089fbe03194c9322393ee7fa4beab279e0" +
      "337bc882c1fb2c0220721f1dfef0b450b5ce0bacf7211e4f7384684c3806b047ad44fb75c27a3e38990121036ae438" +
      "e191f51d40791027d4fd555cb19e50476a17911c9177377ed00f376e0cffffffff12a7e49de69624814cca51ffa137" +
      "450114711c8d192026a0f51ced52b562cbaa000000006a47304402205919632991ef68b1416a1aed35210b1677af25" +
      "00478f8c264b969107d483b77002201833bed9786bd0ea58f6eeaac6c5e9f8cc17dda087ba08a48dc0b3467590de15" +
      "01210322466dff86ff10ddebf0cfe2c9c4596ebaaab1ad96cc230e6d4673bd0014c933ffffffff873755c5e66d34b2" +
      "cecc07d812ffb710c61e2290fb34cdead16cf7fe83b220a5030000006b483045022100b47a9ccb1ebee838c3c90615" +
      "c780e16479427b8b76a659ee6e22706ee65b5acb02201a956c8fc5d9a4d45850a467591df296b348da03c7543f24ea" +
      "a5af02b2aa3a3d012102dd47d8325cf73015bb9eaa7a643131cde42778d422321be2bec581af84ad7b59ffffffff13" +
      "5fb0838b2e4f322b9b4a6e0c97a275f39c47a8e3acc17993601caf397296bf010000006b48304502210098f5c0f940" +
      "f8c5204c71bbd2d6464a057dcb63ea05f6650809942174b5512d4102207cc501d32b0d9ca3c20a869a73a71323bdfa" +
      "bbdee10eda4df4b160eb5752bf96012102757c34d7b20a0d1b05748e979653e54bb6541dde866a3e9430939843fa24" +
      "1f74fffffffff4a671b4224f0bddd8f0e92a509ac4338a8011ee49c442b722059ddf87fee53f1d0000006b48304502" +
      "2100a710ac8abcc17709a27b97c4e4b83df67cb32e35de791889967c9bbd0bacf400022057c1d13dac85a5dea2667b" +
      "e5f138787e4778de8ca09c369ee29bd55fc10b27420121032fbe4b28c92a51f0e0240908cf305af94faf82aaba94d6" +
      "517fd6ef71211864d4ffffffffafd82628fcf564321b793060b3a7ce0beb3ede991c950d95efcefcf76d334f900100" +
      "00006b483045022100d7b76f94534425a5e5f389563ad97c6891dc72b05a88087642882a427a35a19902203da7cc2e" +
      "07cb52bf741e9ded9b64f5a3cfcddf72a9e616d1582cfd1b44ae14400121027d43788a1f6d4c59621ed24c5952ccf1" +
      "e83cd1c6b0c7748292d9fe70aa071c1bffffffff16946daac25dd6fd97c9a9fb5007a3f86bb95f7c9e244a28fcd586" +
      "bd99939c60010000006a473044022033862c297bf4ae9a5cff4429e2e0c31e297e191e95bfea9bde6d0bb13bdf9a22" +
      "02202032007128ee66a9f6939f0f19b7a8d3c50674ee78d530a64c05b20d6f106d25012102757c34d7b20a0d1b0574" +
      "8e979653e54bb6541dde866a3e9430939843fa241f74ffffffffaa59e407fb632f18c24d6a73b50a0296fa802fa186" +
      "76ea4d930596f3771cbacb000000006b483045022100a45832dc5750208f320cefef2ea30998116b26e63077fc48be" +
      "1681069330f98802203f708ea17ef1c5f7ec5f410db387fbd740763d673922587bbe91e6b2954c036301210233f2ad" +
      "107120c3a62091e21c4c608750af2ff1cc8c6710d6ab2cb1f55a04598fffffffff818bd89bb2e7da8e30ebd6a2c15d" +
      "3b6fdd5b8c12e734d971920f9ef7c44a75d0000000006b48304502210087cbb8ff28e73bbc7e2b65920f821b87311f" +
      "92427100f7cc04947f96df205011022018a807e0f4ffac38367b38d013b540ef443a3a79e85e8474bb5d64d611f16f" +
      "a9012102a9bc558542d3083f08b7512ddfc1eaeb94ea8a8163fcca4efc9aa98296d6f5caffffffffe7831f2224aff6" +
      "1f14db5ab689c63fae4f3f8967683c0d34a789fe5ea4b63bf2010000006a4730440220169cf724d790884dcec29b13" +
      "b1adacb374876ab326e45b748036accca315dc30022013a082fc166e248c92ce5d50480331dd7cd833849da36b63be" +
      "2dd76702078ddb0121028743bc998a2645b5e8f7ea7e7c4bfd611cd2f64c32e180b950d9765f07f34b9affffffff62" +
      "1ffab0ba09d70343f288c1106eede60e93cb1fd69b72b5d89a1b93a6ed46972d0000006a4730440220676d138775d9" +
      "22635ce67d0499b3ec2b8ba764feb2aacb27e8f34b3437d9243002203d6962ae59aca37375d9ac09271e69739db31b" +
      "052a03bd5a711bb04624a678260121036ae512295f738982bf21e23858abdf8c14dd6ed786889bfa4380f853a13730" +
      "8bffffffff79b971a32779eed630ec92d56042e22c7fb01eb4d48dd972b05ad94b9d233a51150000006a4730440220" +
      "44d35d862b9eae4438c1b4a46a5dbc882e8cbb320f7b5dbead684bd56da6628502207563436be9771a2992640372d8" +
      "ce5b48e9a676b600c3b8a3a4a3d91f96e54b7b0121021a57b143134eb63d4af9c678e189cb53286b92d6d747288b55" +
      "50917984646a14ffffffff98c3f501fb309cb0a0dfba3520df6bd6c611c0044102a331d0fc062db151388b05000000" +
      "6a47304402206a4c58019229209e6371d11dd6bd9c89b30355eefba2858814619a513cdfdea502206c95eb9743c837" +
      "e5b7649db873896ff23e394bf4c798f02ecc192006feaa200c0121039b3da032a39b180c688fc481859b3de7a10d5c" +
      "aa40b91174ada87da16f416f6bffffffff4b6dc96af3bfcfd22266b63072b6d5245d42901d1fc7953e98b07f9a2cfe" +
      "3833010000006b483045022100f1b4d96209ade1e1462fdd2a1f60444e16969da9efffaef7c74f6ff8b644ce800220" +
      "36616178b887768dd7b2915bd4cd544a56d5ad61f5c654855b9897941600f2ee01210340d31d422c97489f2fec48a6" +
      "aa0b8c941638899f4c8a7b9c5a4fedbba1e08384ffffffff9cbb2170b837c80f36d13e545d645b5d314a3e1beee561" +
      "8d21db73895bbfb81e0d0000006b483045022100d368c30d3975e997de12fc28ee170a05aae8482013992a6df2a534" +
      "2fa6fa6ef602206112b644559100216ab2631bca9ee7bc21c529ae262789ac895ef11ae91daa040121030a3665281a" +
      "68dae8a1465d00d84630ddb2224f7be2ca9abc38a698ec03fdee24ffffffffbe3e6174c4c2337b7bc2f650380b8cae" +
      "5ae14decc00495e3a88bfc80578262d11d0000006b48304502210099c4ff7dcc769eda7c3b49e6e6f63c2db0ac353b" +
      "2b8889c559314305d4f86186022064501bb5ae626ad92397a8a8c64d0c07be9e7ca830c896b77c54d1e41304554e01" +
      "2103e1acc7f253c0717f3c0f81c5fdf0c160efb472bf923c4645542759b1573dfaa6ffffffffb853de1c3fd1ff4b5e" +
      "9393b013861ca5d9a939a00094f098b575ede6f7f91054070000006b48304502210086c27362aaa81c5b97b90f03d2" +
      "86290cfc80e276dd34c61eae7e8bf13902b4e802205ce056ab1967b7ebf9e87712d37da4ab9f9dffed759406644ba4" +
      "f7cbbb97152e0121027d0a1a4c306261165b994a42d8ea4c97ce77180e353d3613117c69b0c51eeee8fffffffff41d" +
      "b912473b477fdab6ff4213976381a060c95dd02fc5561a1a729c95c75741080000006b483045022100ad73d410b7c7" +
      "a0a46e16942fad18e70a10035c62d929d30e0306a6d3c85323a602200d69e9a61d52fbb0a7dfef02f58bc56b9ffdab" +
      "c6477db074ee0e9f4da8bd7a2c012103d772f168c83a9a7d8ec1dfc7361598c67176f3bb8c8deb1985154794693291" +
      "6affffffffdc4771307fbdfee29e4e62128e89a0bd3012d6540a392f5988e4ef8ae4b664711c0000006a4730440220" +
      "4916cb4f0ebfdf3e5a390c75f070ce6b37d1970f8d677accc6ef56145ea8905b02202d71b58ca666a0866cbd813926" +
      "73bebfe28a0e000c5aaa40ea66e6dfc57c7d3b0121022635140cb178214cbcbca91b0dafc4873618d76e48f7d2abbf" +
      "8b960cf2255d59ffffffff2a04d2e9ee8462bd9826f74cbe8192ceac3f6bfd1c4c98f53030c32c49f129892e000000" +
      "6a47304402201f6a758840d591f8b7dfab14c52958f9b142dfac925cbca176b6cd37f29428d902206e0b7c20985244" +
      "5bb99e036d5bee3f5a905ba56d0b4748d2b8348de007379417012102c3310ca432115fc449fc4bd99fee433214fced" +
      "ed94ba8e68f54fb352c067ac64ffffffff336f84e4bd0f2adea6ac046a203267dc8154863877f53d33feddda5def77" +
      "dea71a0000006b483045022100b0075d8c34ac1b2228a9051e5bc9be90871a82989fb19a49b379515e250f56a40220" +
      "56f40461fbc4dc363e046220a8fa5a42e61117d437443cdd8a2d61299f424ff0012103323d9a9f28f0be610b200b77" +
      "41f8678c6a20de7eabec47cf866cb3f62caeab93ffffffffbe3e6174c4c2337b7bc2f650380b8cae5ae14decc00495" +
      "e3a88bfc80578262d11f0000006b483045022100f72bbadbe5b54653a0dfdfeac1de4b81c115f10e88514d7315c963" +
      "a6d5dc674e0220487ec4346720bc9c19aaa4a04adce73bb5877c45c0c198c2d2bd3162967779f901210281b578fa76" +
      "09df6fb535f265673f540f329f68b482483edf8ce754131ae4997fffffffff4eabe362993cce140dfd0f4dc11ff704" +
      "2a9a12a37b96810928069fea23fddcb3000000006b483045022100895ef0c7195b6dccc4ac49ee429658b89cc28fa1" +
      "f35243340b9e87670b5548d002200702feb4bf748d423d131f819327eb45b5c2f20463e55af8a34a647a7459caf801" +
      "210392137398f727822871cd0d43b3edda1bfd15f551db151d8b54ab0cceb52eda93ffffffffdc4771307fbdfee29e" +
      "4e62128e89a0bd3012d6540a392f5988e4ef8ae4b664711d0000006a473044022072d58e0f32fded73d15123969b9f" +
      "84e19899bda7f50af042ea630f043e8884320220708ca300fdc770d7e2bbb765ea3fbc4655af94505f7989573c9ce4" +
      "97297bfbe6012102e3fe5705df660e98d2ea0767943f938c997407a84f6d580b92dcb734d039e126ffffffffbe3e61" +
      "74c4c2337b7bc2f650380b8cae5ae14decc00495e3a88bfc80578262d1200000006b483045022100dc58accbf9b5a3" +
      "8620036863bfbf3dc3fabcdd82872b9ac5903e360b7865adca02205433e65611692e0653c1e1193bed935a1621b351" +
      "bcb5c53fa124ba1bcf268f09012102996697fa2b056bbb5b13bb25726525744ffba670ff1a2cf62d1eca2f7c86c8ce" +
      "ffffffffdc4771307fbdfee29e4e62128e89a0bd3012d6540a392f5988e4ef8ae4b664711e0000006a473044022000" +
      "ce905319579fc061792878fa88bac3de7f9fd9a8d191f2daaed5c4cdc72f890220749044986368dcf8df692bf22f91" +
      "68cc8daf90351369a64d96979fe63ce31e8d012102ab0d8c8128a2e217da7fc6d7330f18f0054c92d4f29ea4197ca7" +
      "72b88abaf039ffffffffdc4771307fbdfee29e4e62128e89a0bd3012d6540a392f5988e4ef8ae4b66471200000006a" +
      "473044022051703a5e0311de6e2cd1e1c112b228b2020b5fd30542ddc8d5af2bb1bf5fb6a7022060706a1ef95c5ce6" +
      "e50005b98729800c181a384a59a0ac9f15fbe312ebb1e9b60121031d2dab71ab15af2b231ecd3c22532f87dffdad7a" +
      "135042ded61f25b0341e4e85fffffffff4a671b4224f0bddd8f0e92a509ac4338a8011ee49c442b722059ddf87fee5" +
      "3f220000006b483045022100806f2a157d5b68993ad52f8f52cfd8dd819404191305002862756e161c271842022038" +
      "1165d6c2557bb885515b1bba15828940704d1968a6460456fd5de9179447d7012102510e02ff2ec7868aa0385c9e88" +
      "98547908481a2638d4f629073b425da6474353ffffffff79b971a32779eed630ec92d56042e22c7fb01eb4d48dd972" +
      "b05ad94b9d233a51020000006a4730440220446309b0b4442554c2556ef81076ce116c274fae987295591cd57d92d6" +
      "086aef02201f7ce005745547d1c39efd55068721e7bef9eb079f0046840818cfe0379c5611012102c6b777ae6a03f9" +
      "bf7ec16e6e304d0d1ba63255c23e0d35b7db2df94f11ee4043ffffffff999296b67c886dea8599ce1ad4e0740ba718" +
      "ef9b9a3585ca2aca8900c2ce20da000000006b483045022100b126c965664e7667090a2e87f368cb7527925c3608b4" +
      "80f44f04b29f93d61c430220758d5c0d8ef33fb7972bfc621906276f5beba88b39e45cc905a2a390c4332546012103" +
      "78d82717c0fd37eb06a62e2e7d32f6726731de469e95eeb47cd937fa891ae6eeffffffffce86714c96c47a6f4310e1" +
      "c9a58c9036b7a6b44d5f4c237bb09227f397d81a030e0000006b483045022100c134ac9187831d2d469cd014257e6c" +
      "540b4247ae245c4ee6f8d52b4c7e9621eb02207834049dd65a6112649a8e2dfe9e83147bb7bcdc599cdf492a42c6cb" +
      "58ae38d80121031062b4e95f6044b7b4e18d321fc506385c38e62ad8edfb3c61196b88b3cbf43fffffffffdb3649db" +
      "b79df5261aba175d1be7ab0aaa4940561268b001482b4876bbf2b5e84d0000006b483045022100c96432644d9e8eb8" +
      "97bd1bec723715c8338778a05a24279648decc92758ce4b2022056fe6541a0a827e7a1677c9282cbf6cd9caba17dfc" +
      "9a546f48df0e34c049d0ec012102fd085bc609e3beea1ad2d370b78259bf753f8d7daa6501559b98229f6e9b1c4aff" +
      "ffffffad767e796b9bd02d6ce5379d277c0c668210d462c3d268863c91c43e57f8588f000000006b483045022100e6" +
      "0b190d3d2295edce0a985563a880058dfe0223ccaec000e1a540a5b641784c022041ed976d6ab8514e688713126b4c" +
      "fd16b78b587a6282d2fb93f8a7937130db310121036fe670b2b6bb055dd06380faf5fd37ab813827b6bdaeaf986433" +
      "8c6c1dee0eeeffffffffc54c8ae63fa7bfbed98c0b57b5553630652dc2f64be6c15d43682e7faa388cfd010000006a" +
      "47304402207a8fcb565fe91c71a88eecf0c5b6391f063eaf6edae60d1442abd94476da096602207734917135235114" +
      "5b64d3e9dab933ba82170e3108881bd6fa1e7b453766dd4001210300a5dd9d498b514b20d430fa8d734661fab09a59" +
      "e05553108358746b90d74eceffffffff489b208f7842d4c4cfb19b4c9159fff058918de550dd52945bb8aab92e809b" +
      "21010000006b4830450221009c38ee69476d960c6154efec69683e83a6e0fcde812725c76e50f7cc04dbdedf02202d" +
      "70ed981994c0e2ae92823da3f401dd043fd258b9239b4bb2bdab556eff7aa10121036cf98c1489a33e84effac55314" +
      "8a113f28ea1f6942ec16ce34af0781f7b1e9f3ffffffffeaf4b62005283a778d0d029e2a13279f959e46290c965f82" +
      "441450b1fe286d66010000006a473044022065f91d563736219fb525b04858dfd54427d6e5630a45db2484d267b825" +
      "cbddd902207844cb992750fa66b166633989c1f3d850068d582461b74a203fd4e43e1c31c3012102400796c8ec5cc6" +
      "db5bd671674d6b8bbe85a0a9c6ee7277142a31d97e802fc961ffffffff22af31aadc185ca485db6614a690c455fd17" +
      "bc6fc165168ac1fdeb797f77330e0c0000006b483045022100a7045f044ad2b6ac7062dc7ac8f95065061ae82d715f" +
      "6dd1bca7ca7dedcdba7302204614bd1102aa10bb790d3fb7a8d42d0869f6f6c9c204c7ec822cfc39c3600359012103" +
      "3f5196cabda20131bb176976ec21e70c1226cf04720e351f12b698bb6db82609ffffffff560627acbf8b20c63beff4" +
      "7abf04ad4aee5abe086c52ba1afacfd40db0a4c53d000000006b483045022100bc3f5e64428511eabd9fef4bf2578f" +
      "007c74deb9653e316468453e94325e153302200d9bb740b0e14c1f883c703ed36528ff4c522a6cc44723f10d206b3d" +
      "8d3f3a2e0121026d170db3fb47ee56533025020cf7eed92ae44a8c333720d6a0f6a8aa69ee4db9ffffffffb0429498" +
      "34c7abc63fa7efe3f36cab5816a9538dab81e50cfabadb99140c1ff8070000006b483045022100b61f23748efd96de" +
      "7de8f31861a3931897bc612eaeb888e61bf445855faf2dae02207ad6259062de84cb20def02c5cd278259782ba5847" +
      "470bc8f677445a3859657201210250d7bf450e197ea7304f33fef042694ffbd35d11b9d85ff73e46e725bd69903dff" +
      "ffffff9c465bfcc6fd403a1dbb622eff295fcfcae76ca64ee79b066517383037049c9d000000006a47304402201f8e" +
      "98427945171e4b9dcf58e368c14364ad59eb5e1a0b214e8203b24d4b805b02202510c2989fc1c49b0964a4820913e7" +
      "f5e12699c34523be38aa944a3523b34a41012102672acb087ffdfe1ea6b11240f150e142ab46b9c5bdca40750be2d0" +
      "f3e23447beffffffff74398dbefc0784d2a6db409ebd4d162252d4af411d3abbe67f7bc2e65e4e35fa000000006a47" +
      "304402206150b679ddd99b87f5830a7063ee2f7b0594f8faa1f0df383a955f8887479130022014c92a84432550fbd2" +
      "dae0f8da247eb76a0e4f874c5a27ee7bb8c2d5f826884301210351eb6d7c0e2cb8285d53bf00d9b46484ec7f42c678" +
      "95296a1d1f6b1fafaf46a2ffffffff1bf726e8ee727ee33d591e14210056eb9eced33506468ad1d5841be0b85f6232" +
      "050000006a47304402207b7549e7720c77b02d9cc297383ce225a2ac304c398920f9886b4282693f7c1d0220109d22" +
      "32f8123a7c84adf6b0292e47514239b669e2d48328a7474e44fd805e2a0121025dace8e2c68818e4a1d70878312749" +
      "0c0913e6b1c5e14626b0b0e913aab07c5bffffffff243af7c94c5f77167a011267689b64fa96c343eb45ae5c4d469b" +
      "9f1e018f7e6b000000006b483045022100cac073e8d7536f7f60c5f66f0ab1e2245fcb0c77d082113f8b1182b84466" +
      "e32e02207495cd8cb4d4599a7c8b2f89168b34fd277de031ac99d8a59a5014d6fc51c7f20121023d48c86f9e7d8105" +
      "b7875de00ea90b303c8722efabf17b198f62bd8a3b947afcffffffffa1b55da6cf64dbcaf02106d2505ae0501afb6b" +
      "b6e3af3a3423f0cb8f89a7f369150000006a47304402204736cbc6926016b50ba770b026e3a058e413639d69d0084c" +
      "ba25f13deaed55000220401af98337f43159c89689b81e0308f83d726d0b18859c28dac9f63230d1294a012103c14a" +
      "cb64aa66c8fe241c7e9ee17711837466b32e1d054503b8d7fc24229f067efffffffff590fe41e87b48a7402ae6f1ba" +
      "3c281b130b166ad401a60605b8334fb6f5e7c9010000006a4730440220311128b6468b0bdefb1da8f1fac53d223d59" +
      "087857a19c72045adebdb8d6d73302200a45e8ac500af976a59e797a06e83da46cd870344277ebe0192f1bcde960c9" +
      "ee0121026cb485a67348e2f8c750d0ed12708682e2a47a1bade920e3b6aa12063784069affffffffd77d6e1cc51ed3" +
      "612eae402ea42624dd370fa945946d9f9415115f26eda6b254080000006a4730440220733b2e727f49379a549661c4" +
      "8b2b1e69d7cdcda3a71e5912be82c6f69e4f8268022066b77b6c0407cdab5b6f48d1e81113dc832e5d1cab113285c6" +
      "8258da72fbbb0501210232101256b5f645d1c677d15fcc274046453ecd972b0dfcf7182a2ef25fe6ef1efffffffff4" +
      "a671b4224f0bddd8f0e92a509ac4338a8011ee49c442b722059ddf87fee53f240000006b483045022100ea5bb24be6" +
      "2af0ba36d7d99d48839bbf27a19ea5868bdfba5b34e50aaf75cea50220493adac981c36f6e80de39c0a0177d1d9c43" +
      "7dd11500d2070dac70b44e086edc012102882760d1907ca0df52b097a130c205ee526f072afa4404460f0529b79498" +
      "cf0cffffffff08d060bf3203f094232e32cf8115a6aea1a4c27c940de60a4458be55a6348218000000006b48304502" +
      "2100b93741601c0924ac2702c1e699683f2b6dac280b5bfbc1b0f8f179fa53cb3cdc02206df10a65f0031d283c333f" +
      "dcb09fb0f72887bf45a96f36cea7780462adbb7369012103452516c90bd4a9590bb38e63d0c33b7b8948bbcfcb0b7e" +
      "f1ca9862b4f6f690ffffffffff441ba0ad541fb62c8bb82f66a33eea71493c769bb839b6e8c4d17dd570d0fedc0100" +
      "00006a473044022034214696b43bfd627a5c2705e938cc2146fa13de40173c51b271622704fe89840220088fe66965" +
      "da74d40b9b4a4b1314a5701cb9358b652b5780789a79ba40446bae01210224fae7adfffb6f5f1d42b51bc986868bc3" +
      "3711726b35829f365a83681b84f288ffffffff02ebeea009d637317c3fc589f3d735df757a980b64ef9ca203c093d1" +
      "decd47a5000000006b483045022100bfdcc3de71c326a1e760a2d73fad3e2513df1bba4daa919fa2c3392ee0b9bd84" +
      "022039521591e21c17e38bfabcabfe400b4d1a0848e5d46b324e249e4147152a0e66012103575e00a86d5dc67476af" +
      "ad0b2602cc7f157084ea88ef9c00cceab2c1204cc57dffffffff44c1382029d9d6b346a1f386e91ac5307e9ec9a694" +
      "dbb3efc96519658112bd36010000006a47304402207811ddc1265d249862bdfc047be7313f63d9cee4c833f6052405" +
      "3e6b9c6f30970220277b75a60dd254f5968cdf0e7ae0ede52ef2bc250a90935da8361cdd5f2728fc012102d48f50ff" +
      "b2d14909e95bf55cc55b229bc4a98675389e1e35a382458ee8701cf1fffffffff4c12f576f26bd769ad3a6b5a8b687" +
      "d93546acf059d6cb237ae73df3210177d2010000006a473044022001253477f7560d2f69d23345a30c3cfacf282994" +
      "e34c09178edc6390b211b9fa0220503b9394d1116c3b3cf905ae60d1d36c462a3759eede048ecbaa963907bd437f01" +
      "2103e2680d96307e722deeace3d12d8c97fb8b0b8d3ddfd7693ca28ff0041d82a90cffffffff8ba1799e7cfc19f8b5" +
      "055239ba02f55d69c1b079ea612df072dc6ca04b0cf3bf000000006a473044022009c017db57e7f0876864f9f9a31e" +
      "1d4d81cb8e817c5b602308c59a7b274914e20220202d131a484750c01177a17e1d7c5e76b55295c0d84a6cde90684e" +
      "927fcfebc301210205beda425c338e241c7f6ce0756d9bff469492472c0c8237deb71d478507ea06ffffffff79b971" +
      "a32779eed630ec92d56042e22c7fb01eb4d48dd972b05ad94b9d233a51110000006a473044022047d1426dbd032703" +
      "806ac50d92f880c786369ad1ae352e2db59415af66141447022048d2489170b5ec10571cb13550fb44990cfb31eee3" +
      "fda836b34b98627b904d4f01210367f626440a5db056907c01cfddff8994cae50d57ef4d1421d3fe563b56fcd408ff" +
      "ffffff3417929d98e15401afa891983c103222af5c87ed5483c7ecb41b984af66b3cf4000000006b483045022100a0" +
      "170416456c287c599692e02043ce14d4bceafc276bf25aee01cf61fcb747770220418862454b3ae144ab1c763bfa00" +
      "ac2dce62a92ccc59242136d584b6a5cb471d012102640c2ba0652a21d66c04548d64d0995204383f87b49efd8a41bb" +
      "8fe2059d9e02ffffffff056604428580f93725a06ce0375fca2ef8368fcabba5ef8b268b439090d27fcb000000006b" +
      "483045022100ba7b45e125aee37e808f9980266bce57bf678750ebb12be4b9815f1170bec32202205891ebde506a80" +
      "7d2c450df4d838bf204b12e66109dd343c8ba16a56616a67a8012103d85004a5b867128901ac3c128622503a23e0d1" +
      "f4283b6bc1857dbcdb13de5fb5ffffffff6137f3d321f86b6781303a120309938207e5945f2ee66051230bbda55684" +
      "2066010000006a4730440220766505f0bc710f9da603bbe6056a4701f0e964179e69e9cba961de70bfa848e302206a" +
      "ae2b1f3a49dc365c941acebdc0aacad39e2e6400d5cd0fbd8c8bcb5b10b2c70121022f38aedb3f16f99b2d0108ea18" +
      "08c801c234cbcd8f6e367c6ebba5252090a238ffffffff9720496900000000001976a914e1c403e23aaea69012b082" +
      "d17b6f42d46ee080dd88acec133d00000000001976a914ba174a61bade11755a8fcd2ddb7802a9667c79c988acba9e" +
      "1000000000001976a9147bd6c486fd2008c80ddbb7a5d3b462564008908288ac74f01300000000001976a9141a34d8" +
      "daa8713f46f46f99330d2c790b39813ea588ac60823b00000000001976a914c5fe883a8e97470eae3a87f8c87dd118" +
      "c9f0ec4288acff938400000000001976a914caaae78cb5557567a1fad4c383a85c28c617e9ce88ac40753902000000" +
      "001976a9146b2d3bc3c31679e56293d9d38bca8359dd12a4a588acdc945400000000001976a9143d11263c006bb937" +
      "f49f5668088fc4096286d14f88ac80f0fa02000000001976a914be5189cbc087773689e622c8a25944b6c86cfbac88" +
      "ac24201600000000001976a91441c8c599a2f966a83a5c07c85b30de37236839d988ac018e1300000000001976a914" +
      "02c1ffac8200b6134dfa1678f692ee9476f97ce788ac00e1f5050000000017a91442e12bcd6a9a89f05792af78be7e" +
      "e900e35f4ba487c05c1500000000001976a91426350bdc9e5d98c1c5319c2f183543196435fdfe88ac7606f7010000" +
      "00001976a914f699f003ad0433c3dfb68b8b9a7945db2c53d92488ac0065cd1d000000001976a9147a5ba13ff44251" +
      "5d9d99c01e9ba4f89833a3d2c088acd7e21d00000000001976a9147942824c6cbcafdc44072fa513ba619cc39086b4" +
      "88acd6436d000000000017a914d8f88ec1fdc833f35ce34e4d82cea54a26fb198d8720402c00000000001976a914ef" +
      "29c0cec0bbf1392cabf942b5926cad877e714e88acd803ad0a000000001976a91413d9903a54dedea2d4c004e665e5" +
      "cb346857ccaa88ac73597a00000000001976a9143b5e9856ec0a374ccef679e53408cdadfc13384188acbc95f70500" +
      "0000001976a91429ce126c38089e48e17983d856f04e86d856d3d488ac98b56b00000000001976a914f9823f9626af" +
      "29fa47296686f1df8cdecb917a0588acad9d6600000000001976a9140e9cc22335dab79e18841ba9db9a0c1a10f43d" +
      "1188ac6009cf03000000001976a91466d444dbb6533a33a843400f212eb6b88ac5518a88aca0bb0d00000000001976" +
      "a914203d562b21d33f3c33bf5c478fbcb37f2d2c169988acc0047700000000001976a914364d8d79950fdb9df93d1f" +
      "04c849f6c40740c1aa88ac00e1f505000000001976a914a4b93cde000fb09a775fcfb58b84894f1d94b4b588ac7038" +
      "3900000000001976a91455fe832b8f6b1f8f7fda66308f21b30de3817df588ac80841e00000000001976a9144ec842" +
      "df8b6949ffb94b2935f13506551aeac0c888ac6b145c400200000017a9142fb5e9105e6e7f989042c31a09883fa836" +
      "2ca41b87804f1200000000001976a9146d5e93445eb39705fc82ddc0f0de989c0e84e7a188ace0fd1c000000000019" +
      "76a914498964ef1c73a0a1fb35c4586f4a92fbcf9c412488aca6c0950a000000001976a914e3acd01c129dac2f095f" +
      "0b1ff8a964f6a70ff81f88ac3d69f902000000001976a914271edfa918601c75cd473ca74025c7a919e6001388ac71" +
      "0c0600000000001976a91403b134b858425802ea38aff764a63d7e1dc1765788ac71876c00000000001976a914743f" +
      "1b90ea2fcd80ad59b6f511b7fbfcaf9f48eb88ac404b4c00000000001976a9143c96bea053005952fbd5e8f944ea52" +
      "59d2b84a7588ac2dd14703000000001976a914cd309618dc27f9cbb3cde64e9b8c5609c25d2d3588ac60a62f010000" +
      "00001976a9146a7d1b3eedea1100fe43a05ebf58ef46c8ac578588acc5c141010000000017a9145f48488f5cf4ec12" +
      "1c7c1439d068c51ea0b9019f87c02d0201000000001976a914271c6407df9ecf76a446cf765ae77248f75da36988ac" +
      "603bea0b000000001976a914ad0ffe9eac6c989b08c6e0589e1107793d67061388ac20496900000000001976a9140b" +
      "3b94f3d902affebc17b7c54adfba2a2a48e8bd88ace04aef08000000001976a91477e371a1ab19336c6bfe06ef1a4c" +
      "a7d9c2dd9d7e88ac60decb1d000000001976a91479e802bd0d9a01eca47fd73d02e0c5d713965ef588ac009f240000" +
      "0000001976a91481ae8cb3b619d99850c8a7321f1103d82c36486b88ac882f7773000000001976a91419ecfbde77a9" +
      "a7f0a8128a225e915eea3c5774e088ac655e0709000000001976a914d31d945bbbf8cd11cb04ee280762a47079f70f" +
      "4a88ac92e87d00000000001976a914deb675c31fa08563c068aa5ae7927da4b5d18bab88ace0feb30d000000001976" +
      "a91459e81a17e444016de84835160b53ce045c42a51a88ac9db35201000000001976a9147dfa6f10c406db0323f9a0" +
      "63415b480689292ac588ac00b19e00000000001976a914b853086ec73308bf1973f5fa242ae7b5968cc3f888ac60e6" +
      "7a4d000000001976a914894c6b823a55359ecb6537c1412a378d6c43575c88aca2d10602000000001976a914a399a2" +
      "2129410885146defd97a8504dfcbdad31088ace1523f01000000001976a9141105a332785c82277c2e67d5c4a5745b" +
      "21b132d988aca02526000000000017a91449fed3554e739a89fbbcbed013c64fa121be3cf087b1763f050000000019" +
      "76a914d564dbe73c7b736161ae3eebdac5cfaac8e6a48a88acf0500600000000001976a9142bc606014981c68a3cb9" +
      "89962071be3b035e607488ac6529c503000000001976a914227a4ee305c76f5dd3735e7d45a62a59fb1fa31c88ac77" +
      "df1000000000001976a914eb9264576a5b1ece59f133368fc2e53c243bded288ac00e1f505000000001976a9142159" +
      "5030c03c3e85555a76fa4ed7e23598f1b21588ac77bc8801000000001976a9142bdab6b061040602ef2abb69715a99" +
      "0201a7574e88ac8b0a2201000000001976a9143796aa7b4b234062518f1503d57ba354427deb8088ac0079950c0000" +
      "00001976a914b1c45b05a5464a75798783da22e2835f49b818b788acefd22300000000001976a91406fe6c6530f90c" +
      "4a81e9b16d3725a5a07bc32dea88ac69b34504000000001976a914c84cd3bcb937f4884b58ae6005d9e245cc497692" +
      "88acc25c3c00000000001976a914a362d9a904de2fe197a19ca17eb2f1e0d930faae88ac80f0fa02000000001976a9" +
      "145973351327d3861f315b20bf42b0ab32df7aa43188ac9df39500000000001976a914437d22719af3c4965199b221" +
      "2ad56417b3fbfa1088ac700a1700000000001976a914121bcc7c2c982342bf4deddce23e3bee40e3f73988ac28ffb4" +
      "00000000001976a91412b53d20c740e626340637d189d5d239f874f13188ac201d9a000000000017a914fd88a68af5" +
      "965658197cf7ccbf395f2bbc944cd68780841e00000000001976a914d24895db4185b314cfd865a99761636c11007c" +
      "4c88ac6062a335000000001976a914bd7b6b66921bb6f63acab01e5e7fba095890e04088ac4e7f3c040000000017a9" +
      "144ff24378cb1bfed2213799dbb5dc592e1b53aa0c87c1e781080000000017a91469f374c98ed7e86454e8421549e8" +
      "1c6e28e5dfd98780f0fa02000000001976a91418d91ce887e1c93d3d179e66cc006f71d483f0cf88aca01570020000" +
      "00001976a91426a227a6eab667709bf8c63fc368ad914bd5ee8d88ac64badb00000000001976a9140c343fbf601a4c" +
      "6a6ffdcc0ba83e461e588c6ae788acac391600000000001976a91455b0b9c699220dbc031149cc94b9a93cd65f20f3" +
      "88ace00f9700000000001976a9140e5bc695808404876545c0d8de2eb42a2b2f8d5c88ac342a8408000000001976a9" +
      "14cc513b072219fce411ad610673fe9a056b01c39b88ac80841e00000000001976a914275a3796077ea75187f4123d" +
      "0628dc1697bc33d188ac9a631d00000000001976a914e69a0a33638a454247c068e9a8e339ac40be619688acded239" +
      "02000000001976a914909031d9c4caa2c5f2a3e3e68fb29f20bf6f5f8788ac20a10700000000001976a914bbb08618" +
      "d2af1e026d4c9a5ea03be7a194df2e3988ace0450502000000001976a9142bb5e6dadc88e68cceec7dc1230bd443c3" +
      "89fc0988ac706408000000000017a914e84addd9f74ab689fd7cd94a6f5e92ea64caa44987ab9a4002000000001976" +
      "a91433eaf3d28583bbc3ac8955c1d51a14ba90d9c96c88ac2cd20b00000000001976a9149a05474e8da289d39894f8" +
      "d250b6c553e33122cf88ac00093d00000000001976a91411d0217d9c8c3c590077c11c2d0dbff861b21c7888ac034c" +
      "1300000000001976a9143aa93b6d8647a9abfc9301766c043a8db1c6d6f088ac40e13300000000001976a914ac937a" +
      "eddd99cdb98a2f40db2cdac4eb3886be3188ace069f902000000001976a9141eca4da334c5a787256c0cba4dd37a35" +
      "2633dabe88acf96f6500000000001976a91441ae178ebd1b86793f2970a874604caa4a5d3a1d88acb8db0700000000" +
      "001976a914204efd97f51b6f213821fba5ea50e138ccd046ca88ac1ee28800000000001976a9147ea81f1223a8732e" +
      "74c64c3e43f5d6f567ec4b7888ac0027b929000000001976a914b507b30fd6f9f194c50f8da06fc5fb32492d3b7488" +
      "acf9bf2700000000001976a9149b13c3ca1dc4fb6fcda79e684ab6ded391eb8dee88ace069f902000000001976a914" +
      "54190f35753d526a4305fe8a0a75835a7a19d67088ac7b17d0f5000000001976a91413e759d1d6cda48a36c67eff68" +
      "0b671aa38b0cf888acec140700000000001976a9142bfba1d9cfcb3897f4a9edf62b68110b127f5e8b88ace0c81000" +
      "000000001976a91416ab4f3a146c771a7d5b52597a6c8332f9d3a6fe88ac602dc304000000001976a9147c55bec45c" +
      "ac4e550cad5b51455d64610588792b88ac605af405000000001976a914623e925b2b5f6e6824fed01c28c816034994" +
      "959b88ac37d18c03000000001976a91438265b5f220e62afe7d9e2ec0b088a637650a28d88ac62b092020000000019" +
      "76a914836596f23bf7afc8c8b83c50046dfa4749f67c1a88acdc813400000000001976a9141a41d7f8325702f163f1" +
      "f069d52a2729c88e097d88ac82334e01000000001976a914712b1671c0fc3009fa7eea851c21aae8af117cdd88aca0" +
      "a8a200000000001976a91430e589cd8319907d32367247a047c6d70b20122f88ac35801d00000000001976a914a1e3" +
      "ab8c265942b2cbb81a5cde8074aa9a2eb02b88ac80969800000000001976a9146ce9c479db5d01a788410aefffe50f" +
      "16d1886cee88ac7efa0d00000000001976a914df85254af0398adb489ee7eef18e2243ef003c1a88acf838e7060000" +
      "00001976a9140868894f06ea2496c4e30d7f08c0661135d116a588ac60a6ed02000000001976a91443bca488c8192e" +
      "5b145c896566a54de472df6fe388acbde4cf41000000001976a914371f75b639d49cf3c75d5daba2f7bb9ca05d8f6a" +
      "88ac788dc4080000000017a914b1db781cfcef81e3b2bea55d8aae42c4525eb35087b033aa030000000017a9146c3b" +
      "3cf28467735134bef3fc98a9fedd5ca72ac387e069f902000000001976a91426cabaf93b35ee3c48287c1306000dfd" +
      "e1f50e5988ac10e9eb0b000000001976a91457d8fa65ce2d9534cffaf569dc1fb22509603a4d88ace0fc2b01000000" +
      "0017a914ae15d0932beef28c5ae4b531abcd200ab8c118198769d775000000000017a914852c592cd4ba8782b0bd10" +
      "63fc7b2741546e72e387ff6d8608000000001976a9145ad1aa7428c53ca021096303b466840c68c875f488ac58f93f" +
      "00000000001976a914327a51ac676efc636de9170e69d92e1f270eea1188ac2052a600000000001976a914b0c0233a" +
      "08bcc7ad9125c345f7b120122df708b488ac0f1b0203000000001976a91434910d5910ebf0f5a3011e4c295c078940" +
      "153ab488acb81a5900000000001976a91484b2def9c8bf92532fe8ba3aa8297bbdca9b9fbe88ac50df250000000000" +
      "1976a914f344fde3328cfef56cf887d87227238e9d02921488ac7f5af405000000001976a914a28b4f8fda6ac7b7a0" +
      "0c4e4d5606808efb2b7c7388ac80969800000000001976a9148518c9631ccfe176ee2cbdc9adfd180777b0845688ac" +
      "80584f00000000001976a914fe35c7e3da2ac8e99cfa077876d1ceffddad541188ac9b0f1c00000000001976a914db" +
      "d7b3eaf55587569fd4095ce5a3f4cf5b108e9f88ac07bc3d00000000001976a9145b94b3ae5129bb2f3828c292c7b3" +
      "65de1d3a3d6c88ace04aef08000000001976a9147eb991a5916fa79d3d50ae2923f42bfbe81ec53e88acb0e7210000" +
      "0000001976a9141fcd4b99f5494c065684f5c8ffa026bd9a590e6988ac80ee3600000000001976a91490ad8cb79219" +
      "61911c5170d13bbf89b1b66e331f88aca0f17b01000000001976a914225400effdaee290d41dba838ad054ba6d08e4" +
      "b788aca985cf05000000001976a9148ad487cb3d534d4248e721443d1882f3f80462ec88ac20ab7a32000000001976" +
      "a9142acf8579986346cb3197cb9b11531a8a0254719788ac33832800000000001976a91446d9ad29985a869ee78155" +
      "ec6d3f900c191804c388ac71cf7100000000001976a9147c936b8588a7c644e2a50eee7bd0627c4fcd878588ac6087" +
      "2507000000001976a914405055b870a81ebc24f616245fa8f3e5b252602d88ac38630400000000001976a9149411eb" +
      "40bd067f43f3b2114189cce2a84a8cc98b88ac3c2c1000000000001976a9141209473f8d300842409a9786dd90dc41" +
      "06aece3188ac60bfc1230000000017a9146ea959b12bfcbe6e81db64716d68b3ebe0ca8f7387a0c44a000000000017" +
      "a914b1f584e60c797039307d959741e89335043f109c87143796000000000017a914d4bed273cf5560c70c096b73ca" +
      "385ebe600f43d187601ce0110000000017a914d1c160fc9fcd998b54e2e53b3dbb87a35c299cf287002d3101000000" +
      "001976a9147fb134470b284fc675e5760110fea79af769b73f88ac78372c010000000017a914f8a1078b047f391b92" +
      "411733717a0cfc6699e4a287d2d1fd53010000001976a914e71debe251bb26c7e757d9ae265da6e5d00f31b988ac00" +
      "000000",
    txid: "3e969cc08ea8fae8163ec7dde3867d1359a711672f2c7dff726cb10aa398714b"
  }
];

const scriptsigs = [
  {
    asm:
      "3045022100b7bf286e5f6ac6fa308e8876a8a59b289094851a26cf62c20abd174917eb7762022069b5269e584e4c76" +
      "f207d1b789bff7171a663d795e49751c12cf07dceb2a94c701 024a0dcb0527c2751ea4dda3aa98f6eface16e978db" +
      "a8062bcbed623f158c07691",
    hex:
      "483045022100b7bf286e5f6ac6fa308e8876a8a59b289094851a26cf62c20abd174917eb7762022069b5269e584e4c7" +
      "6f207d1b789bff7171a663d795e49751c12cf07dceb2a94c70121024a0dcb0527c2751ea4dda3aa98f6eface16e978d" +
      "ba8062bcbed623f158c07691",
    witness_hex:
      "02483045022100b7bf286e5f6ac6fa308e8876a8a59b289094851a26cf62c20abd174917eb7762022069b5269e584e4" +
      "c76f207d1b789bff7171a663d795e49751c12cf07dceb2a94c70121024a0dcb0527c2751ea4dda3aa98f6eface16e97" +
      "8dba8062bcbed623f158c07691"
  },
  {
    asm:
      "3045022100af246c27890c2bc07a0b7450d3d82509702a44a4defdff766355240b114ee2ac02207bb67b468452fa1b3" +
      "25dd5583879f5c1412e0bb4dae1c2c96c7a408796ab76f101 02ab9e8575536a1e99604a158fc60fe2ebd1cb1839e91" +
      "9b4ca42b8d050cfad71b2",
    hex:
      "483045022100af246c27890c2bc07a0b7450d3d82509702a44a4defdff766355240b114ee2ac02207bb67b468452fa1" +
      "b325dd5583879f5c1412e0bb4dae1c2c96c7a408796ab76f1012102ab9e8575536a1e99604a158fc60fe2ebd1cb1839" +
      "e919b4ca42b8d050cfad71b2",
    witness_hex:
      "02483045022100af246c27890c2bc07a0b7450d3d82509702a44a4defdff766355240b114ee2ac02207bb67b468452f" +
      "a1b325dd5583879f5c1412e0bb4dae1c2c96c7a408796ab76f1012102ab9e8575536a1e99604a158fc60fe2ebd1cb18" +
      "39e919b4ca42b8d050cfad71b2"
  },
  {
    asm:
      "304502210092a204c35e27ded55012b28b8f88192058d29fd8c455442eca025f74cb6a51a3022016b1b98397b6c1387" +
      "126732c66300e75680d0896b64dcf4a6835f72435b0035001 02a32cf30511795881f432b38883a5793d00828430226" +
      "d379d43ae2dbb603a8c9b",
    hex:
      "48304502210092a204c35e27ded55012b28b8f88192058d29fd8c455442eca025f74cb6a51a3022016b1b98397b6c13" +
      "87126732c66300e75680d0896b64dcf4a6835f72435b00350012102a32cf30511795881f432b38883a5793d00828430" +
      "226d379d43ae2dbb603a8c9b",
    witness_hex:
      "0248304502210092a204c35e27ded55012b28b8f88192058d29fd8c455442eca025f74cb6a51a3022016b1b98397b6c" +
      "1387126732c66300e75680d0896b64dcf4a6835f72435b00350012102a32cf30511795881f432b38883a5793d008284" +
      "30226d379d43ae2dbb603a8c9b"
  },
  {
    asm:
      "3045022100f3ecd6482fc71de2f84f876eea8ac8be4f9cf92f885f14e97283c46d97c7566302206ec0f71137c8ff101b" +
      "2437441924726af39ff1db68f17238b4835c5214d5ad0d01 036451829b5a49f4909500ce18c4500bf16f9c4dd49c1be" +
      "2e9c74d210a134514d7",
    hex:
      "483045022100f3ecd6482fc71de2f84f876eea8ac8be4f9cf92f885f14e97283c46d97c7566302206ec0f71137c8ff10" +
      "1b2437441924726af39ff1db68f17238b4835c5214d5ad0d0121036451829b5a49f4909500ce18c4500bf16f9c4dd49c" +
      "1be2e9c74d210a134514d7",
    witness_hex:
      "02483045022100f3ecd6482fc71de2f84f876eea8ac8be4f9cf92f885f14e97283c46d97c7566302206ec0f71137c8ff" +
      "101b2437441924726af39ff1db68f17238b4835c5214d5ad0d0121036451829b5a49f4909500ce18c4500bf16f9c4dd4" +
      "9c1be2e9c74d210a134514d7"
  }
];
const test_scripts = {
  p2pkh: [
    {
      hex: "76a9148b4912ec0496b5f759f3af5ab24d6f4779a52f9e88ac",
      pubkey: "026263992eda6538202047f1514e0f6155a229c3d61b066807664e9ef73d406d95",
      pubkeyhash: "8b4912ec0496b5f759f3af5ab24d6f4779a52f9e",
      address: "mtDRkyy3a65oNhATimSQFhRqU511buvVAT",
      p2shHash: "029c09b86e1e4c3822bc71859af3300520d577c2"
    }
  ],
  p2sh: [
    {
      hex: "a914ed4a0e1af5316666499ec6f8a5a99bf4abaf754987",
      scripthash: "ed4a0e1af5316666499ec6f8a5a99bf4abaf7549",
      address: "2NEstrBkkLcEmXCrUxStQnY9dP9PRoHNmNk"
    }
  ],
  multisig: [
    {
      hex:
        "522102c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb92624221033e81519ecf373ea3a5c7e1c" +
        "051b71a898fb3438c9550e274d980f147eb4d069d21036d568125a969dc78b963b494fa7ed5f20ee9c2f2fc2c57f86c5d" +
        "f63089f2ed3a53ae",
      data: [
        2,
        "02c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb926242",
        "033e81519ecf373ea3a5c7e1c051b71a898fb3438c9550e274d980f147eb4d069d",
        "036d568125a969dc78b963b494fa7ed5f20ee9c2f2fc2c57f86c5df63089f2ed3a",
        3
      ],
      p2shHash: "45cbbfbc9d78d3d26e464972e1ed0640e57baabc"
    }
  ],
  if_else: [
    {
      hex:
        "63522102c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb92624221033e81519ecf373ea3a5c7e1c" +
        "051b71a898fb3438c9550e274d980f147eb4d069d21036d568125a969dc78b963b494fa7ed5f20ee9c2f2fc2c57f86c5df6" +
        "3089f2ed3a53ae6755b27576a914f89873b36ea31cfbf4d2081db73147078460c61188ac68",
      if_script: new scripts.MultiSigScript([
        2,
        crypto.Publickey.fromHex(
          "02c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb926242"
        ),
        crypto.Publickey.fromHex(
          "033e81519ecf373ea3a5c7e1c051b71a898fb3438c9550e274d980f147eb4d069d"
        ),
        crypto.Publickey.fromHex(
          "036d568125a969dc78b963b494fa7ed5f20ee9c2f2fc2c57f86c5df63089f2ed3a"
        ),
        3
      ]),
      else_script: new scripts.RelativeTimelockScript([
        new scripts.P2pkhScript(
          crypto.Publickey.fromHex(
            "02c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb926242"
          )
        ),
        new transaction.Sequence(5)
      ]),
      p2shHash: "b6ec775b130018247aa62797865071c354cc86eb"
    }
  ],
  relative_timelock: [
    {
      hex: "55b27576a914f89873b36ea31cfbf4d2081db73147078460c61188ac",
      data: [
        new scripts.P2pkhScript(
          crypto.Publickey.fromHex(
            "02c08786d63f78bd0a6777ffe9c978cf5899756cfc32bfad09a89e211aeb926242"
          )
        ),
        new transaction.Sequence(5)
      ],
      p2shHash: "a7553c4129f920da43f9621a62c98c1833d54be2"
    }
  ],
  p2wpkh: [
    {
      hex: "0014f81b6a6cfaaf19dbd9e56b9cab2d8a457608ad8e",
      hash: "4d09a2ea331cf46887c00a82122d4cc288a77c4480acf474073c178428efd3d4",
      type: "p2wpkhv0"
    }
  ],
  p2wsh: [
    {
      hex: "0020cdbf909e935c855d3e8d1b61aeb9c5e3c03ae8021b286839b1a72f2e48fdba70",
      hash: "bec02ca04c990083b099f9e9d2a90e9498025f5061cfb3e3b3077aa4b60a484f",
      type: "p2wshv0"
    }
  ]
};
const bip32keys = [
  {
    pub:
      "tpubDHVQPtNuLdRLj7FU348D5PcrkkPj5ibhN52cfjthEH9KTfwTaVmodTn1Ekpge6PhUjW1noZ452xesirHgBKbzmY6hz4eoVXDwHcjczDT7zb",
    priv:
      "tprv8koNFULfCFjfqeDg9QTcfyxkBisnvPQnnmRqPDrPp1LvdBggx6xDSyA94cjpAXS7ccGhsQ7w6q7Y9Ku31e1eTDztU49LVBz9B1sCDoeE6Jc",
    u_hexpub:
      "0430e8ca46b7e5aa07d975ee152214431e419fac34e50becaf7e46db9a9c97d244426184e0d6ca627ac5f2837ba887c9faa6c5b100bb92ac7f41ae7890cff9fe2d",
    hexpub: "0330e8ca46b7e5aa07d975ee152214431e419fac34e50becaf7e46db9a9c97d244",
    hexpriv: "9b1b400e3b1211c6a56695cf1742f0a94ea38b995c1e1fb910458baa8a0874c4"
  },
  {
    pub:
      "tpubDEhdzhXujo86G6PXroPKQJSCJi8qbdQvrALhTNiExsGKfFHXtVbTE9tnLBCAP7nqQrqfUSVTCDuqv6RMHu8PDL5a8G43b5N2zKsF89nmLd6",
    priv:
      "tprv8i1brHVfbRSRNdMjy9iiztn5jgcuSJE2GrjvArfwYbTvpm2mG6ms3fGvA5kdZ3qZ7KB26VehAudSCUURKT56Hej2pBgj26ZkNbdD1YMdTiD",
    u_hexpub:
      "041c703de670b3b0df446e948f76acecd6e539a6a395b408bbcd711e2744b74a7bb488d3b387f0fcd19bc2bd8e13d11821011d7036ab4018a04b44810ca8e3ffe6",
    hexpub: "021c703de670b3b0df446e948f76acecd6e539a6a395b408bbcd711e2744b74a7b",
    hexpriv: "e2cf56175f5cd5f19e9d1599b99463d769c6e16f1753dfa18aab64cbabeb7b7d"
  },
  {
    pub:
      "tpubDDqNYkcvEKbQJKtda5miuWCBWqX2Bd8qJWgSNbsiqfSHRzNpsjpXHAMiNYNHZw9FCnkuJpVAJjZkTeujhT4h293w6YMexGyAgNGRYWVtJ1D",
    priv:
      "tprv8h9LQLag5wujQrrqgS78W6Y4wp162HwvjD5f65qRRPdtbW84FLzw6fjrCNeqEvsKqiDxLtzJ9oHUGVTL17KptjbDVqgJ2XvAs2LcvSWrTUh",
    u_hexpub:
      "04ce81eed1b5b05b538c62eddeef310a31958929f67b58183fde1a6e14314207b7eae85ecfca3fec3fc4d437f4cf9726262faf065fc0c6741045c641a95c9199a5",
    hexpub: "03ce81eed1b5b05b538c62eddeef310a31958929f67b58183fde1a6e14314207b7",
    hexpriv: "61f0ddee86bca16f89dbbfef3fc4059758d8279e77dd816490f2c621bb6f67b7"
  },
  {
    pub:
      "tpubDATAg7GX3FHknHSDzfVEgwo8U1aEWPNdkgRjs4dBF244x9xC6tRqUkM8ZMk8JNHnmQMqNG1evQBNKwt97G348FXaWjhT88UWbwqrBTpmwe3",
    priv:
      "tprv8dm8XhEGtsc5tpQS71peHY91tz4JM4BjBNpxaYaspkFg7fhRUVcFJFjGPFHYGQLo21nmCrkjryoUFJKSKMUjKqpuRXAmMMhvMaP27UtqeLA",
    u_hexpub:
      "043804dcac6b7dfb41ff1b4731d690bbb3b480d505dab7ef83c237c18d98eb7c219189e56822e59668b0efe3a5723734ea6e88b9cf8371fa8effc3538e518e0012",
    hexpub: "023804dcac6b7dfb41ff1b4731d690bbb3b480d505dab7ef83c237c18d98eb7c21",
    hexpriv: "784c5adf8cb196ae4a8c3e4b9708974d699fe0ec41f07ada6e342a0e65300c14"
  },
  {
    pub:
      "xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8",
    priv:
      "xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi",
    u_hexpub:
      "0439a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c23cbe7ded0e7ce6a594896b8f62888fdbc5c8821305e2ea42bf01e37300116281",
    hexpub: "0339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2",
    hexpriv: "e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35"
  },
  {
    pub:
      "xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw",
    priv:
      "xprv9uHRZZhk6KAJC1avXpDAp4MDc3sQKNxDiPvvkX8Br5ngLNv1TxvUxt4cV1rGL5hj6KCesnDYUhd7oWgT11eZG7XnxHrnYeSvkzY7d2bhkJ7",
    u_hexpub:
      "045a784662a4a20a65bf6aab9ae98a6c068a81c52e4b032c0fb5400c706cfccc567f717885be239daadce76b568958305183ad616ff74ed4dc219a74c26d35f839",
    hexpub: "035a784662a4a20a65bf6aab9ae98a6c068a81c52e4b032c0fb5400c706cfccc56",
    hexpriv: "edb2e14f9ee77d26dd93b4ecede8d16ed408ce149b6cd80b0715a2d911a0afea"
  },
  {
    pub:
      "xpub6ASuArnXKPbfEwhqN6e3mwBcDTgzisQN1wXN9BJcM47sSikHjJf3UFHKkNAWbWMiGj7Wf5uMash7SyYq527Hqck2AxYysAA7xmALppuCkwQ",
    priv:
      "xprv9wTYmMFdV23N2TdNG573QoEsfRrWKQgWeibmLntzniatZvR9BmLnvSxqu53Kw1UmYPxLgboyZQaXwTCg8MSY3H2EU4pWcQDnRnrVA1xe8fs",
    u_hexpub:
      "04501e454bf00751f24b1b489aa925215d66af2234e3891c3b21a52bedb3cd711c008794c1df8131b9ad1e1359965b3f3ee2feef0866be693729772be14be881ab",
    hexpub: "03501e454bf00751f24b1b489aa925215d66af2234e3891c3b21a52bedb3cd711c",
    hexpriv: "3c6cb8d0f6a264c91ea8b5030fadaa8e538b020f0a387421a12de9319dc93368"
  },
  {
    pub:
      "xpub6D4BDPcP2GT577Vvch3R8wDkScZWzQzMMUm3PWbmWvVJrZwQY4VUNgqFJPMM3No2dFDFGTsxxpG5uJh7n7epu4trkrX7x7DogT5Uv6fcLW5",
    priv:
      "xprv9z4pot5VBttmtdRTWfWQmoH1taj2axGVzFqSb8C9xaxKymcFzXBDptWmT7FwuEzG3ryjH4ktypQSAewRiNMjANTtpgP4mLTj34bhnZX7UiM",
    u_hexpub:
      "0457bfe1e341d01c69fe5654309956cbea516822fba8a601743a012a7896ee8dc24310ef3676384179e713be3115e93f34ac9a3933f6367aeb3081527ea74027b7",
    hexpub: "0357bfe1e341d01c69fe5654309956cbea516822fba8a601743a012a7896ee8dc2",
    hexpriv: "cbce0d719ecf7431d88e6a89fa1483e02e35092af60c042b1df2ff59fa424dca"
  }
];
const wifkeys = [
  {
    wif: "5KAFQsA5qtk3RNXAfph4KXWkqAXDx6f91sSyqyjuq6KUfWsbky3",
    hex: "b1060bed3ce69fbc7f15c129c70c98fdc19885d042883b2601a53d6b90786a56"
  },
  {
    wif: "5HyrgcD3RBX5iKLDGFbiBFN899rkYSi6obLKL2yn1n1nvqQWdV4",
    hex: "15bb440ffce8cf660f2f9f4130bb5a5847e1a1a0e3f2f15c64bc91ea7d5783de"
  },
  {
    wif: "5JUM68oq1SEoYWXauRXjPzFykxbWWBxQ2w3YdKH3zmn2gbeNCwY",
    hex: "566bc51059b577de9c32bba4d5b3cba715f155ce870e01b5409f89ef5a5f70ff"
  },
  {
    wif: "5J1CkkKSsYqyrhZesUzChnjDnkhRRkDcWgh2H1jKeaMqTVYdt6V",
    hex: "18c9b3a095d99cd10899f1d7ec6a4f52cd11ef1c2ec29a806c7267c67589b60f"
  },
  {
    wif: "5K1pukTRmcgvQT2e8KY5b27LDYhcdUTfqdXTFwexHoa4Mh6TMwN",
    hex: "9de6406e7afc24f51bb2c0a4d690732790b12563e2cb58be29dbcc58ea3a7be6"
  },
  {
    wif: "5KXLxiahr9aFv3wCfePY2r4KJdAmqgXHLEWRG8B7b5cngWumk7N",
    hex: "e0ec86c2226068d46426159058ada533cca9e4983d559afbee3f91927e63fc3f"
  },
  {
    wif: "5JwPxhgszsVCHoKvVKaukbaccEJa6qyiyjeLwnTdbptydA7UgVX",
    hex: "93d717d6e0ee8526bad83dcdea1284b3c1ae632b6cb87aade1879d3526b4eb07"
  },
  {
    wif: "5JuMEY3YpMN4rJey3cwBq6pgXeZ4KjLz6Qm1Wm57mWGY2HmVvNG",
    hex: "8f31344c72474f4a6ea78bc218d53764547306728a09ca7f38c8f5cd5ecc5e3a"
  },
  {
    wif: "5KQeMRyaveNTjj5iqj3f4eecUL1FqUEBUiVYpL1daz8v1F5VoXY",
    hex: "d1b5def6305709e5c783546f459ffedef3350e16c3a1916b5cdda376243bc31e"
  },
  {
    wif: "5KaFQHYWgiuN84F6EfHByvUkjrgVqG5k1Ahv8YM7W5LCTKPrUNm",
    hex: "e784a66a744e0fe38784091315b4729fd6b3cdb63d44d9d8c6df18d0ab4cf63f"
  }
];
const signatures = [
  {
    key: "b1060bed3ce69fbc7f15c129c70c98fdc19885d042883b2601a53d6b90786a56",
    message: "aabbcc",
    signature:
      "30440220057dc4d850be7815d672b02b138de2c9e1ed71e165f2063400f3aa67ed50" +
      "ad5102206d8b4bf06ba9a4282f960443a1c041950579dc9f279560f2c566c479be6f" +
      "9a9a"
  },
  {
    key: "b1060bed3ce69fbc7f15c129c70c98fdc19885d042883b2601a53d6b90786a56",
    message: "0ab1ce148c65faff0019",
    signature:
      "3045022100c2337de29df19f69f5707c87916aa473467aa67645265ee62f8fb04e8c" +
      "ac60ad02205f2fbb1104bf604f250893b62543416b5d9d261aadd1869a38029c6ccd" +
      "806377"
  },
  {
    key: "b1060bed3ce69fbc7f15c129c70c98fdc19885d042883b2601a53d6b90786a56",
    message: "c37af31116d1b27caf68aae9e3ac82f1477929014d5b917657d0eb49478cb670",
    signature:
      "3044022022313b172c5249a3b054712e1edcc41d094779982ef406d66685a5fbebe3c" +
      "5e802202e94281fcd73f121c98a908b53e5515417949afcb23f1d48b2a28263a1ee53" +
      "14"
  },
  {
    key: "566bc51059b577de9c32bba4d5b3cba715f155ce870e01b5409f89ef5a5f70ff",
    message: "64f3b0f4dd2bb3aa1ce8566d220cc74dda9df97d8490cc81d89d735c92e59fb6",
    signature:
      "3044022002828d6eca86405888f00434af1958eb3883a7048c47dac78977ea666c651" +
      "b27022015cf5d763c8dea65e68ddc4a2c82076ca8be19ff4ce6874c9cfa927ec87585" +
      "99"
  },
  {
    key: "566bc51059b577de9c32bba4d5b3cba715f155ce870e01b5409f89ef5a5f70ff",
    message: "a4f3b0f4652bb32d1cefa56d320cc74d7a9dff7d8490ccd1d896c35c92e59fb6",
    signature:
      "3045022100e159f775573c8d02d2acc3449bf64b504b81b8d06a94f6d342ec1085627a" +
      "63e70220235395623f203132e2ce36e8ea91afd7ee283c5d7d38efb8be03558f51aaf3" +
      "60"
  }
];
const segwitaddresses = {
  p2wpkh: [
    {
      bech32: "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4",
      hash: "751e76e8199196d454941c45d1b3a323f1433bd6"
    }
  ],
  p2wsh: [
    {
      bech32: "tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy",
      hash: "000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433"
    },
    {
      bech32: "tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7",
      hash: "1863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262"
    }
  ]
};
const segwit_data = [
  {
    unsigned_tx:
      "0100000002fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f" +
      "0000000000eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57" +
      "b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85" +
      "c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2" +
      "f0167faa815988ac11000000",
    hash_prevouts: "96b827c8483d4e9b96712b6713a7b68d6e8003a781feba36c31143470b4efd37",
    hash_sequence: "52b0a642eea2fb7ae638c36f6252b6750293dbe574a806984b8e4d8548339a3b",
    hash_outputs: "863ef3e1a92afbfdb97f31ad0fc7683ee943e9abcf2501590ff8f6551f47e5e5",
    hash_preimage:
      "0100000096b827c8483d4e9b96712b6713a7b68d6e8003a781feba36c31143470b4efd37" +
      "52b0a642eea2fb7ae638c36f6252b6750293dbe574a806984b8e4d8548339a3bef51e1b8" +
      "04cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a010000001976a914" +
      "1d0f172a0ecb48aee1be1f2687d2963ae33f71a188ac0046c32300000000ffffffff863e" +
      "f3e1a92afbfdb97f31ad0fc7683ee943e9abcf2501590ff8f6551f47e5e5110000000100" +
      "0000",
    sighash: "c37af31116d1b27caf68aae9e3ac82f1477929014d5b917657d0eb49478cb670",
    signature:
      "304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a02205" +
      "73a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee",
    txins: [
      {
        prev_script: scripts.P2pkhScript.fromHex(
          "2103c9f4836b9a4f77fc0d81f7bcb01b7f1b35916864b9476c241ce9fc198bd25432ac"
        ),
        prev_amount: 625000000
      },
      {
        prev_script: scripts.P2wpkhV0Script.fromHex(
          "00141d0f172a0ecb48aee1be1f2687d2963ae33f71a1"
        ),
        prev_amount: 600000000,
        digest_preimage:
          "0100000096b827c8483d4e9b96712b6713a7b68d6e8003a781feba36c31" +
          "143470b4efd3752b0a642eea2fb7ae638c36f6252b6750293dbe574a806" +
          "984b8e4d8548339a3bef51e1b804cc89d182d279655c3aa89e815b1b309" +
          "fe287d9b2b55d57b90ec68a010000001976a9141d0f172a0ecb48aee1be" +
          "1f2687d2963ae33f71a188ac0046c32300000000ffffffff863ef3e1a92" +
          "afbfdb97f31ad0fc7683ee943e9abcf2501590ff8f6551f47e5e5110000" +
          "0001000000",
        digest: "c37af31116d1b27caf68aae9e3ac82f1477929014d5b917657d0eb49478cb670",
        privk: crypto.Privatekey.fromHex(
          "619c335025c7f4012e556c2a58b2506e30b8511b53ade95e" + "a316fd8c3286feb9"
        )
      }
    ]
  },
  {
    unsigned_tx:
      "0100000001db6b1b20aa0fd7b23880be2ecbd4a98130974cf4748fb66092ac4d3ceb1a5477" +
      "0100000000feffffff02b8b4eb0b000000001976a914a457b684d7f0d539a46a45bbc043f3" +
      "5b59d0d96388ac0008af2f000000001976a914fd270b1ee6abcaea97fea7ad0402e8bd8ad6" +
      "d77c88ac92040000",
    hash_prevouts: "b0287b4a252ac05af83d2dcef00ba313af78a3e9c329afa216eb3aa2a7b4613a",
    hash_sequence: "18606b350cd8bf565266bc352f0caddcf01e8fa789dd8a15386327cf8cabe198",
    hash_outputs: "de984f44532e2173ca0d64314fcefe6d30da6f8cf27bafa706da61df8a226c83",
    hash_preimage:
      "01000000b0287b4a252ac05af83d2dcef00ba313af78a3e9c329afa216eb3aa2a7b4613a" +
      "18606b350cd8bf565266bc352f0caddcf01e8fa789dd8a15386327cf8cabe198db6b1b20" +
      "aa0fd7b23880be2ecbd4a98130974cf4748fb66092ac4d3ceb1a5477010000001976a914" +
      "79091972186c449eb1ded22b78e40d009bdf008988ac00ca9a3b00000000feffffffde98" +
      "4f44532e2173ca0d64314fcefe6d30da6f8cf27bafa706da61df8a226c83920400000100" +
      "0000",
    sighash: "64f3b0f4dd2bb3aa1ce8566d220cc74dda9df97d8490cc81d89d735c92e59fb6",
    signature:
      "3044022047ac8e878352d3ebbde1c94ce3a10d057c24175747116f8288e5d794d12d482f0220" +
      "217f36a485cae903c713331d877c1f64677e3622ad4010726870540656fe9dcb",
    txins: [
      {
        prev_script: scripts.P2wpkhV0Script.fromHex(
          "001479091972186c449eb1ded22b78e40d009bdf0089"
        ),
        prev_amount: 1000000000,
        digest_preimage:
          "01000000b0287b4a252ac05af83d2dcef00ba313af78a3e9c329afa216e" +
          "b3aa2a7b4613a18606b350cd8bf565266bc352f0caddcf01e8fa789dd8a" +
          "15386327cf8cabe198db6b1b20aa0fd7b23880be2ecbd4a98130974cf47" +
          "48fb66092ac4d3ceb1a5477010000001976a91479091972186c449eb1de" +
          "d22b78e40d009bdf008988ac00ca9a3b00000000feffffffde984f44532" +
          "e2173ca0d64314fcefe6d30da6f8cf27bafa706da61df8a226c83920400" +
          "0001000000",
        digest: "64f3b0f4dd2bb3aa1ce8566d220cc74dda9df97d8490cc81d89d735c92e59fb6",
        privk: crypto.Privatekey.fromHex(
          "eb696a065ef48a2192da5b28b694f87544b30fae8327c451" + "0137a922f32c6dcf"
        )
      }
    ]
  }
];
const hd_keys = [
  {
    path: "m",
    seed: "000102030405060708090a0b0c0d0e0f",
    pub:
      "xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8",
    prv:
      "xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi"
  },
  {
    path: "m/0'",
    pub:
      "xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw",
    prv:
      "xprv9uHRZZhk6KAJC1avXpDAp4MDc3sQKNxDiPvvkX8Br5ngLNv1TxvUxt4cV1rGL5hj6KCesnDYUhd7oWgT11eZG7XnxHrnYeSvkzY7d2bhkJ7"
  },
  {
    path: "m/0'/1",
    pub:
      "xpub6ASuArnXKPbfEwhqN6e3mwBcDTgzisQN1wXN9BJcM47sSikHjJf3UFHKkNAWbWMiGj7Wf5uMash7SyYq527Hqck2AxYysAA7xmALppuCkwQ",
    prv:
      "xprv9wTYmMFdV23N2TdNG573QoEsfRrWKQgWeibmLntzniatZvR9BmLnvSxqu53Kw1UmYPxLgboyZQaXwTCg8MSY3H2EU4pWcQDnRnrVA1xe8fs"
  },
  {
    path: "m/0'/1/2'",
    pub:
      "xpub6D4BDPcP2GT577Vvch3R8wDkScZWzQzMMUm3PWbmWvVJrZwQY4VUNgqFJPMM3No2dFDFGTsxxpG5uJh7n7epu4trkrX7x7DogT5Uv6fcLW5",
    prv:
      "xprv9z4pot5VBttmtdRTWfWQmoH1taj2axGVzFqSb8C9xaxKymcFzXBDptWmT7FwuEzG3ryjH4ktypQSAewRiNMjANTtpgP4mLTj34bhnZX7UiM"
  },
  {
    path: "m/0'/1/2'/2",
    pub:
      "xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV",
    prv:
      "xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334"
  },
  {
    path: "m/0'/1/2'/2/1000000000",
    pub:
      "xpub6H1LXWLaKsWFhvm6RVpEL9P4KfRZSW7abD2ttkWP3SSQvnyA8FSVqNTEcYFgJS2UaFcxupHiYkro49S8yGasTvXEYBVPamhGW6cFJodrTHy",
    prv:
      "xprvA41z7zogVVwxVSgdKUHDy1SKmdb533PjDz7J6N6mV6uS3ze1ai8FHa8kmHScGpWmj4WggLyQjgPie1rFSruoUihUZREPSL39UNdE3BBDu76"
  },
  {
    path: "m",
    seed:
      "fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542",
    pub:
      "xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB",
    prv:
      "xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U"
  },
  {
    path: "m/0",
    pub:
      "xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH",
    prv:
      "xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt"
  },
  {
    path: "m/0/2147483647'",
    pub:
      "xpub6ASAVgeehLbnwdqV6UKMHVzgqAG8Gr6riv3Fxxpj8ksbH9ebxaEyBLZ85ySDhKiLDBrQSARLq1uNRts8RuJiHjaDMBU4Zn9h8LZNnBC5y4a",
    prv:
      "xprv9wSp6B7kry3Vj9m1zSnLvN3xH8RdsPP1Mh7fAaR7aRLcQMKTR2vidYEeEg2mUCTAwCd6vnxVrcjfy2kRgVsFawNzmjuHc2YmYRmagcEPdU9"
  },
  {
    path: "m/0/2147483647'/1",
    pub:
      "xpub6DF8uhdarytz3FWdA8TvFSvvAh8dP3283MY7p2V4SeE2wyWmG5mg5EwVvmdMVCQcoNJxGoWaU9DCWh89LojfZ537wTfunKau47EL2dhHKon",
    prv:
      "xprv9zFnWC6h2cLgpmSA46vutJzBcfJ8yaJGg8cX1e5StJh45BBciYTRXSd25UEPVuesF9yog62tGAQtHjXajPPdbRCHuWS6T8XA2ECKADdw4Ef"
  },
  {
    path: "m/0/2147483647'/1/2147483646'",
    pub:
      "xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL",
    prv:
      "xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc"
  },
  {
    path: "m/0/2147483647'/1/2147483646'/2",
    pub:
      "xpub6FnCn6nSzZAw5Tw7cgR9bi15UV96gLZhjDstkXXxvCLsUXBGXPdSnLFbdpq8p9HmGsApME5hQTZ3emM2rnY5agb9rXpVGyy3bdW6EEgAtqt",
    prv:
      "xprvA2nrNbFZABcdryreWet9Ea4LvTJcGsqrMzxHx98MMrotbir7yrKCEXw7nadnHM8Dq38EGfSh6dqA9QWTyefMLEcBYJUuekgW4BYPJcr9E7j"
  },
  {
    path: "m",
    seed:
      "4b381541583be4423346c643850da4b320e46a87ae3d2a4e6da11eba819cd4acba45d239319ac14f863b8d5ab5a0d0c64d2e8a1e7d1457df2e5a3c51c73235be",
    pub:
      "xpub661MyMwAqRbcEZVB4dScxMAdx6d4nFc9nvyvH3v4gJL378CSRZiYmhRoP7mBy6gSPSCYk6SzXPTf3ND1cZAceL7SfJ1Z3GC8vBgp2epUt13",
    prv:
      "xprv9s21ZrQH143K25QhxbucbDDuQ4naNntJRi4KUfWT7xo4EKsHt2QJDu7KXp1A3u7Bi1j8ph3EGsZ9Xvz9dGuVrtHHs7pXeTzjuxBrCmmhgC6"
  },
  {
    path: "m/0'",
    pub:
      "xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y",
    prv:
      "xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L"
  }
];
const digests = [
  {
    unsigned_tx:
      "02000000019379fdc32c4c9d4f14cf43bf89a4e64365e4e713e19d7154989f84b" +
      "8d42bbb650100000000ffffffff0180f0fa02000000001976a914fec8ecfbb43b" +
      "e3b0ed143feafe8a79860ac512b288ac00000000",
    txins: [
      {
        prev_script: scripts.P2pkhScript.fromHex(
          "76a914534f5b2c28ac08363dab4d4dfd937e36810b05dd88ac"
        ),
        digest_preimage:
          "02000000019379fdc32c4c9d4f14cf43bf89a4e64365e4e713e19d7154989" +
          "f84b8d42bbb65010000001976a914534f5b2c28ac08363dab4d4dfd937e36" +
          "810b05dd88acffffffff0180f0fa02000000001976a914fec8ecfbb43be3b" +
          "0ed143feafe8a79860ac512b288ac0000000001000000",
        digest: "666493e1386741fa42db54a3968a51b6243b1edd1a980b617d8fbce296132cd0",
        priv_wif: "cPXc7uzzsS5GKmRx7c6AMkwBWmj3LTPNAEeyrARLbVBaqXrrRLBK"
      }
    ]
  },
  {
    unsigned_tx:
      "02000000018eb50f296c02578b3908584faefc739da78579c3667e43a80233abd4" +
      "d3454e4f0000000000ffffffff01002d3101000000001976a914534f5b2c28ac08" +
      "363dab4d4dfd937e36810b05dd88ac00000000",
    txins: [
      {
        prev_script: scripts.P2pkhScript.fromHex(
          "76a914fec8ecfbb43be3b0ed143feafe8a79860ac512b288ac"
        ),
        digest_preimage:
          "02000000018eb50f296c02578b3908584faefc739da78579c3667e43a8023" +
          "3abd4d3454e4f000000001976a914fec8ecfbb43be3b0ed143feafe8a7986" +
          "0ac512b288acffffffff01002d3101000000001976a914534f5b2c28ac083" +
          "63dab4d4dfd937e36810b05dd88ac0000000001000000",
        digest: "9e8b4eb4adad1c8ff31679150a092cfdb9ddec068a2e1c616cacea8f5944170e",
        priv_wif: "cW3YGYL49CpzxjrnZz1jUuEnaAuG4hEgU7oHQTKBNsqcZ584jVmF"
      }
    ]
  }
];
const sigs_vectors = [];
var getBranchesTypes = function(type) {
  const reg = new RegExp("if{ (.+) }else{ (.+) }");
  const res = reg.exec(type);
  return {
    if_b: res[1],
    else_b: res[2]
  };
};
var getTimelockedType = function(type) {
  const reg = new RegExp("\\[relativetimelock\\] (.+)");
  const res = reg.exec(type);
  return {
    tl_type: res[1]
  };
};
describe("Solvers", function() {
  var i = 0;
  var arr = fs
    .readFileSync("./test/testdump")
    .toString()
    .split("\n")
    .slice(0, -1)
    .forEach(function(line) {
      if (!(line.includes("[timelock]") || line.includes("[hashlock]")))
        sigs_vectors.push(JSON.parse(line));
    });
  describe("P2PkhSolver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"] == "p2pkh") {
          let solver = new solvers.P2pkhSolver(
            crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]),
            transaction.Sighash.fromByte($.hexToBytes(vector["spend_data"]["sig_hashes"][0]))
          );
          let signature = solver.solve(vector["digests"]);
          assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
        }
      });
    });
  });
  describe("P2wpkhV0Solver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"] == "p2wpkhv0") {
          let solver = new solvers.P2wpkhV0Solver(
            crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]),
            transaction.Sighash.fromByte($.hexToBytes(vector["spend_data"]["sig_hashes"][0]))
          );
          let signature = solver.solve(vector["digests"]);
          let ser_wit = signature.witness.serialize();
          assert.equal(ser_wit.toHex(0, ser_wit.capacity()), vector["witness"]);
          assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
        }
      });
    });
  });
  describe("MultiSigSolver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"] == "multisig") {
          const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
            return crypto.Privatekey.fromHex(hexkey);
          });

          const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
            return transaction.Sighash.fromByte($.hexToBytes(sighash));
          });
          let solver = new solvers.MultiSigSolver(privkeys, sighashes);
          let signature = solver.solve(vector["digests"]);
          assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
        }
      });
    });
  });
  describe("P2shSolver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"] == "p2sh") {
          let redeem_solver;
          const redeem_script = scripts.ScriptPubKey.fromHex(
            vector["spend_data"]["redeem_script"]["hex"]
          );
          if (vector["spend_data"]["redeem_script"]["type"] == "p2pkh") {
            redeem_solver = new solvers.P2pkhSolver(
              crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]),
              transaction.Sighash.fromByte($.hexToBytes(vector["spend_data"]["sig_hashes"][0]))
            );

            let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          } else if (vector["spend_data"]["redeem_script"]["type"] == "multisig") {
            const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
              return crypto.Privatekey.fromHex(hexkey);
            });

            const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
              return transaction.Sighash.fromByte($.hexToBytes(sighash));
            });
            redeem_solver = new solvers.MultiSigSolver(privkeys, sighashes);

            let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          } else if (
            vector["spend_data"]["redeem_script"]["type"].substring(0, 18) ==
            "[relativetimelock]"
          ) {
            const tl_type = getTimelockedType(vector["spend_data"]["redeem_script"]["type"])
              .tl_type;
            if (tl_type == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
              redeem_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);

              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            } else if (tl_type == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
              redeem_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);

              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            }
          } else if (vector["spend_data"]["redeem_script"]["type"] == "p2wpkhv0") {
            redeem_solver = new solvers.P2wpkhV0Solver(
              crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]),
              transaction.Sighash.fromByte($.hexToBytes(vector["spend_data"]["sig_hashes"][0]))
            );
            let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
            let signature = solver.solve(vector["digests"]);
            let ser_witness = signature.witness.serialize();
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
          } else if (vector["spend_data"]["redeem_script"]["type"].substring(0, 2) == "if") {
            let inner_solver;
            const branches = getBranchesTypes(vector["spend_data"]["redeem_script"]["type"]);
            const valid_branch = vector["spend_data"]["branches"][0];
            const inner_type = valid_branch == 1 ? branches.if_b : branches.else_b;
            if (inner_type == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              inner_solver = new solvers.P2pkhSolver(privkey, sighash);
              redeem_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            } else if (inner_type == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
              redeem_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            } else if (inner_type.substring(0, 18) == "[relativetimelock]") {
              const tl_type = getTimelockedType(inner_type).tl_type;
              if (tl_type == "multisig") {
                const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                  return crypto.Privatekey.fromHex(hexkey);
                });

                const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                  return transaction.Sighash.fromByte($.hexToBytes(sighash));
                });
                let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
                inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                redeem_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              } else if (tl_type == "p2pkh") {
                const privkey = crypto.Privatekey.fromHex(
                  vector["spend_data"]["priv_keys"][0]
                );
                const sighash = transaction.Sighash.fromByte(
                  $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
                );
                let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
                inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                redeem_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              }
            }
          } else if (vector["spend_data"]["redeem_script"]["type"] == "p2wshv0") {
            const witness_script = scripts.ScriptPubKey.fromHex(
              vector["spend_data"]["witness_script"]["hex"]
            );
            let witness_script_solver;
            if (vector["spend_data"]["witness_script"]["type"] == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              witness_script_solver = new solvers.P2pkhSolver(privkey, sighash);
              redeem_solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            } else if (vector["spend_data"]["witness_script"]["type"] == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              witness_script_solver = new solvers.MultiSigSolver(privkeys, sighashes);

              redeem_solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            } else if (
              vector["spend_data"]["witness_script"]["type"].substring(0, 18) ==
              "[relativetimelock]"
            ) {
              const tl_type = getTimelockedType(vector["spend_data"]["witness_script"]["type"])
                .tl_type;
              if (tl_type == "multisig") {
                const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                  return crypto.Privatekey.fromHex(hexkey);
                });

                const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                  return transaction.Sighash.fromByte($.hexToBytes(sighash));
                });
                let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
                witness_script_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);

                redeem_solver = new solvers.P2wshV0Solver(
                  witness_script,
                  witness_script_solver
                );
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              } else if (tl_type == "p2pkh") {
                const privkey = crypto.Privatekey.fromHex(
                  vector["spend_data"]["priv_keys"][0]
                );
                const sighash = transaction.Sighash.fromByte(
                  $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
                );
                let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
                witness_script_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                redeem_solver = new solvers.P2wshV0Solver(
                  witness_script,
                  witness_script_solver
                );
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              }
            } else if (
              vector["spend_data"]["witness_script"]["type"].substring(0, 2) == "if"
            ) {
              let inner_solver;
              const branches = getBranchesTypes(
                vector["spend_data"]["witness_script"]["type"]
              );
              const valid_branch = vector["spend_data"]["branches"][0];
              const inner_type = valid_branch == 1 ? branches.if_b : branches.else_b;
              if (inner_type == "p2pkh") {
                const privkey = crypto.Privatekey.fromHex(
                  vector["spend_data"]["priv_keys"][0]
                );
                const sighash = transaction.Sighash.fromByte(
                  $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
                );
                inner_solver = new solvers.P2pkhSolver(privkey, sighash);
                witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                redeem_solver = new solvers.P2wshV0Solver(
                  witness_script,
                  witness_script_solver
                );
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              } else if (inner_type == "multisig") {
                const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                  return crypto.Privatekey.fromHex(hexkey);
                });

                const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                  return transaction.Sighash.fromByte($.hexToBytes(sighash));
                });
                inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
                witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                redeem_solver = new solvers.P2wshV0Solver(
                  witness_script,
                  witness_script_solver
                );
                let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              } else if (inner_type.substring(0, 18) == "[relativetimelock]") {
                const tl_type = getTimelockedType(inner_type).tl_type;
                if (tl_type == "multisig") {
                  const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                    return crypto.Privatekey.fromHex(hexkey);
                  });

                  const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                    return transaction.Sighash.fromByte($.hexToBytes(sighash));
                  });
                  let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
                  inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                  witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                  redeem_solver = new solvers.P2wshV0Solver(
                    witness_script,
                    witness_script_solver
                  );
                  let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                  let signature = solver.solve(vector["digests"]);
                  let ser_witness = signature.witness.serialize();
                  assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                  assert.equal(
                    ser_witness.toHex(0, ser_witness.capacity()),
                    vector["witness"]
                  );
                } else if (tl_type == "p2pkh") {
                  const privkey = crypto.Privatekey.fromHex(
                    vector["spend_data"]["priv_keys"][0]
                  );
                  const sighash = transaction.Sighash.fromByte(
                    $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
                  );
                  let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
                  inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                  witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                  redeem_solver = new solvers.P2wshV0Solver(
                    witness_script,
                    witness_script_solver
                  );
                  let solver = new solvers.P2shSolver(redeem_script, redeem_solver);
                  let signature = solver.solve(vector["digests"]);
                  let ser_witness = signature.witness.serialize();
                  assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                  assert.equal(
                    ser_witness.toHex(0, ser_witness.capacity()),
                    vector["witness"]
                  );
                }
              }
            }
          }
        }
      });
    });
  });
  describe("P2wshV0Solver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"] == "p2wshv0") {
          const witness_script = scripts.ScriptPubKey.fromHex(
            vector["spend_data"]["witness_script"]["hex"]
          );
          let witness_script_solver;
          if (vector["spend_data"]["witness_script"]["type"] == "p2pkh") {
            const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
            const sighash = transaction.Sighash.fromByte(
              $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
            );
            witness_script_solver = new solvers.P2pkhSolver(privkey, sighash);
            const solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
            let signature = solver.solve(vector["digests"]);
            let ser_witness = signature.witness.serialize();
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
          } else if (vector["spend_data"]["witness_script"]["type"] == "multisig") {
            const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
              return crypto.Privatekey.fromHex(hexkey);
            });

            const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
              return transaction.Sighash.fromByte($.hexToBytes(sighash));
            });
            witness_script_solver = new solvers.MultiSigSolver(privkeys, sighashes);

            let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
            let signature = solver.solve(vector["digests"]);
            let ser_witness = signature.witness.serialize();
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
          } else if (
            vector["spend_data"]["witness_script"]["type"].substring(0, 18) ==
            "[relativetimelock]"
          ) {
            const tl_type = getTimelockedType(vector["spend_data"]["witness_script"]["type"])
              .tl_type;
            if (tl_type == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
              witness_script_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);

              let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            } else if (tl_type == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
              witness_script_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
              let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            }
          } else if (vector["spend_data"]["witness_script"]["type"].substring(0, 2) == "if") {
            let inner_solver;
            const branches = getBranchesTypes(vector["spend_data"]["witness_script"]["type"]);
            const valid_branch = vector["spend_data"]["branches"][0];
            const inner_type = valid_branch == 1 ? branches.if_b : branches.else_b;
            if (inner_type == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              inner_solver = new solvers.P2pkhSolver(privkey, sighash);
              witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            } else if (inner_type == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
              witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
              let signature = solver.solve(vector["digests"]);
              let ser_witness = signature.witness.serialize();
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
              assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
            } else if (inner_type.substring(0, 18) == "[relativetimelock]") {
              const tl_type = getTimelockedType(inner_type).tl_type;
              if (tl_type == "multisig") {
                const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                  return crypto.Privatekey.fromHex(hexkey);
                });

                const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                  return transaction.Sighash.fromByte($.hexToBytes(sighash));
                });
                let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
                inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              } else if (tl_type == "p2pkh") {
                const privkey = crypto.Privatekey.fromHex(
                  vector["spend_data"]["priv_keys"][0]
                );
                const sighash = transaction.Sighash.fromByte(
                  $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
                );
                let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
                inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
                witness_script_solver = new solvers.IfElseSolver(valid_branch, inner_solver);
                let solver = new solvers.P2wshV0Solver(witness_script, witness_script_solver);
                let signature = solver.solve(vector["digests"]);
                let ser_witness = signature.witness.serialize();
                assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
                assert.equal(ser_witness.toHex(0, ser_witness.capacity()), vector["witness"]);
              }
            }
          }
        }
      });
    });
  });
  describe("RelativeTimelockSolver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"].substring(0, 18) == "[relativetimelock]") {
          let inner_solver;
          const tl_type = getTimelockedType(vector["script_pubkey"]["type"]).tl_type;
          if (tl_type == "multisig") {
            const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
              return crypto.Privatekey.fromHex(hexkey);
            });

            const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
              return transaction.Sighash.fromByte($.hexToBytes(sighash));
            });
            inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
            let solver = new solvers.RelativeTimelockSolver(inner_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          } else if (tl_type == "p2pkh") {
            const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
            const sighash = transaction.Sighash.fromByte(
              $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
            );
            inner_solver = new solvers.P2pkhSolver(privkey, sighash);
            let solver = new solvers.RelativeTimelockSolver(inner_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          }
        }
      });
    });
  });
  describe("IfElseSolver", function() {
    it("can compute the correct scriptSig", function() {
      _.forEach(sigs_vectors, (vector, index) => {
        if (vector["script_pubkey"]["type"].substring(0, 2) == "if") {
          let inner_solver;
          const branches = getBranchesTypes(vector["script_pubkey"]["type"]);
          const valid_branch = vector["spend_data"]["branches"][0];
          const inner_type = valid_branch == 1 ? branches.if_b : branches.else_b;
          if (inner_type == "p2pkh") {
            const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
            const sighash = transaction.Sighash.fromByte(
              $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
            );
            inner_solver = new solvers.P2pkhSolver(privkey, sighash);
            let solver = new solvers.IfElseSolver(valid_branch, inner_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          } else if (inner_type == "multisig") {
            const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
              return crypto.Privatekey.fromHex(hexkey);
            });

            const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
              return transaction.Sighash.fromByte($.hexToBytes(sighash));
            });
            inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
            let solver = new solvers.IfElseSolver(valid_branch, inner_solver);
            let signature = solver.solve(vector["digests"]);
            assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
          } else if (inner_type.substring(0, 18) == "[relativetimelock]") {
            const tl_type = getTimelockedType(inner_type).tl_type;
            if (tl_type == "multisig") {
              const privkeys = _.map(vector["spend_data"]["priv_keys"], hexkey => {
                return crypto.Privatekey.fromHex(hexkey);
              });

              const sighashes = _.map(vector["spend_data"]["sig_hashes"], sighash => {
                return transaction.Sighash.fromByte($.hexToBytes(sighash));
              });
              let rtl_inner_solver = new solvers.MultiSigSolver(privkeys, sighashes);
              inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
              const solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            } else if (tl_type == "p2pkh") {
              const privkey = crypto.Privatekey.fromHex(vector["spend_data"]["priv_keys"][0]);
              const sighash = transaction.Sighash.fromByte(
                $.hexToBytes(vector["spend_data"]["sig_hashes"][0])
              );
              let rtl_inner_solver = new solvers.P2pkhSolver(privkey, sighash);
              inner_solver = new solvers.RelativeTimelockSolver(rtl_inner_solver);
              const solver = new solvers.IfElseSolver(valid_branch, inner_solver);
              let signature = solver.solve(vector["digests"]);
              assert.equal(signature.scriptSig.toHex(), vector["script_sig"]);
            }
          }
        }
      });
    });
  });
});

describe("Structs", function() {
  describe("Transaction", function() {
    it("can deserialize and serialize", function() {
      for (var i = 0; i < transactions.length; i++) {
        const tx = transaction.Transaction.fromHex(transactions[i]["raw"]);
        const ser_tx = tx.serialize();
        assert.equal(transactions[i]["raw"], ser_tx.toHex(0, ser_tx.capacity()));
      }
    });
    it("can compute the txid", function() {
      for (var i = 0; i < transactions.length; i++) {
        const tx = transaction.Transaction.fromHex(transactions[i]["raw"]);
        assert.equal(transactions[i]["txid"], tx.txid);
      }
    });
    it("can compute the hash of previous outputs", function() {
      for (var i = 0; i < segwit_data.length; i++) {
        let unsigned = transaction.Transaction.fromHex(segwit_data[i]["unsigned_tx"]);
        let hashPrevouts = unsigned.hashPrevouts();
        assert.equal(
          hashPrevouts.toHex(0, hashPrevouts.capacity()),
          segwit_data[i]["hash_prevouts"]
        );
      }
    });
    it("can compute the hash of inputs sequences", function() {
      for (var i = 0; i < segwit_data.length; i++) {
        let unsigned = transaction.Transaction.fromHex(segwit_data[i]["unsigned_tx"]);
        let hashSequence = unsigned.hashSequence();
        assert.equal(
          hashSequence.toHex(0, hashSequence.capacity()),
          segwit_data[i]["hash_sequence"]
        );
      }
    });
    it("can compute the hash of its outputs", function() {
      for (var i = 0; i < segwit_data.length; i++) {
        let unsigned = transaction.Transaction.fromHex(segwit_data[i]["unsigned_tx"]);
        let hashOutputs = unsigned.hashOutputs();
        assert.equal(
          hashOutputs.toHex(0, hashOutputs.capacity()),
          segwit_data[i]["hash_outputs"]
        );
      }
    });

    it("can compute the digest preimage of its inputs", function() {
      for (var i = 0; i < digests.length; i++) {
        let unsigned = transaction.Transaction.fromHex(digests[i]["unsigned_tx"]);
        for (var j = 0; j < digests[i]["txins"].length; j++) {
          let digest_preimage = unsigned.getDigestPreImage(
            j,
            digests[i]["txins"][j]["prev_script"]
          );
          assert.equal(
            digest_preimage.toHex(0, digest_preimage.capacity()),
            digests[i]["txins"][j]["digest_preimage"]
          );
        }
      }
    });
    it("can compute the digest  of its inputs", function() {
      for (var i = 0; i < digests.length; i++) {
        let unsigned = transaction.Transaction.fromHex(digests[i]["unsigned_tx"]);
        for (var j = 0; j < digests[i]["txins"].length; j++) {
          assert.equal(
            unsigned.getDigest(j, digests[i]["txins"][j]["prev_script"]),
            digests[i]["txins"][j]["digest"]
          );
        }
      }
    });
    it("can compute the segwit digest preimage of its inputs", function() {
      for (var i = 0; i < segwit_data.length; i++) {
        let unsigned = transaction.Transaction.fromHex(segwit_data[i]["unsigned_tx"]);
        for (var j = 0; j < segwit_data[i]["txins"].length; j++) {
          if ("digest_preimage" in segwit_data[i]["txins"][j]) {
            let segwitdigest_preimage = unsigned.getSegwitDigestPreImage(
              j,
              segwit_data[i]["txins"][j]["prev_script"],
              segwit_data[i]["txins"][j]["prev_amount"]
            );
            assert.equal(
              segwitdigest_preimage.toHex(0, segwitdigest_preimage.capacity()),
              segwit_data[i]["txins"][j]["digest_preimage"]
            );
          }
        }
      }
    });
    it("can compute the segwit digest  of its inputs", function() {
      for (var i = 0; i < segwit_data.length; i++) {
        let unsigned = transaction.Transaction.fromHex(segwit_data[i]["unsigned_tx"]);
        for (var j = 0; j < segwit_data[i]["txins"].length; j++) {
          if ("digest" in segwit_data[i]["txins"][j])
            assert.equal(
              unsigned.getSegwitDigest(
                j,
                segwit_data[i]["txins"][j]["prev_script"],
                segwit_data[i]["txins"][j]["prev_amount"]
              ),
              segwit_data[i]["txins"][j]["digest"]
            );
        }
      }
    });
    it("throws an error on incomplete parsing", function() {
      for (var i = 0; i < transactions.length; i++) {
        assert.throws(
          () => transaction.Transaction.fromHex(transactions[i]["raw"] + "00"),
          Error,
          "Incomplete tx deserialization"
        );
      }
    });
  });
  describe("BlockHeader", function() {
    it("can deserialize and serialize", function() {
      for (var i = 0; i < blocks.length; i++) {
        const bh = BlockHeader.fromHex(blocks[i]["raw"]);
        const ser_bh = bh.serialize();
        const hex = ser_bh.toHex(0, ser_bh.capacity());
        assert.equal(blocks[i]["raw"].substring(0, hex.length), hex);
      }
    });
    it("can compute the block hash", function() {
      for (var i = 0; i < blocks.length; i++) {
        const bh = BlockHeader.fromHex(blocks[i]["raw"]);
        assert.equal(bh.blockHash(), blocks[i]["hash"]);
      }
    });
  });

  describe("SegwitAddress", function() {
    it("can convert from and to bech32", function() {
      for (var i = 0; i < segwitaddresses["p2wpkh"].length; i++) {
        const addr = address.SegwitAddress.fromBech32(segwitaddresses["p2wpkh"][i]["bech32"]);
        assert.equal(
          addr.hash.toHex(0, addr.hash.capacity()),
          segwitaddresses["p2wpkh"][i]["hash"]
        );
        const bech = addr.toBech32();
        assert.equal(bech, segwitaddresses["p2wpkh"][i]["bech32"]);
      }

      for (var i = 0; i < segwitaddresses["p2wsh"].length; i++) {
        const addr = address.SegwitAddress.fromBech32(segwitaddresses["p2wsh"][i]["bech32"]);
        assert.equal(
          addr.hash.toHex(0, addr.hash.capacity()),
          segwitaddresses["p2wsh"][i]["hash"]
        );
        const bech = addr.toBech32();

        assert.equal(bech, segwitaddresses["p2wsh"][i]["bech32"]);
      }
    });
  });
});
describe("Scripts", function() {
  describe("ScriptSig", function() {
    it("can be initialized from hex and converted to asm", function() {
      for (var i = 0; i < scriptsigs.length; i++) {
        const sc = scripts.ScriptSig.fromHex(scriptsigs[i]["hex"]);
        assert.equal(sc.toAsm(), scriptsigs[i]["asm"]);
      }
    });
    it("can be initialized from asm and converted to hex", function() {
      for (var i = 0; i < scriptsigs.length; i++) {
        const sc = scripts.ScriptSig.fromAsm(scriptsigs[i]["asm"]);
        assert.equal(sc.toHex(), scriptsigs[i]["hex"]);
      }
    });
    it("can be converted in witness format and back to scriptSig", function() {
      for (var i = 0; i < scriptsigs.length; i++) {
        const sc = scripts.ScriptSig.fromHex(scriptsigs[i]["hex"]);
        const wit = sc.toWitness();
        assert(wit instanceof transaction.Witness);
        const ser_wit = wit.serialize();
        assert.equal(ser_wit.toHex(0, ser_wit.capacity()), scriptsigs[i]["witness_hex"]);
        assert.equal(wit.toScriptSig().toHex(), scriptsigs[i]["hex"]);
      }
    });
  });
  describe("ScriptPubKey", function() {
    it("can compute a p2sh script hash", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const spk = scripts.ScriptPubKey.fromHex(test_scripts["p2pkh"][i]["hex"]);
        const spk_h = spk.p2shHash();
        assert.equal(spk_h.toHex(0, spk_h.capacity()), test_scripts["p2pkh"][i]["p2shHash"]);
      }
    });
    it("can compute a p2wsh hash", function() {
      for (var i = 0; i < test_scripts["p2wsh"].length; i++) {
        const spk = scripts.ScriptPubKey.fromHex(test_scripts["p2wsh"][i]["hex"]);
        const spk_h = spk.p2wshHash();
        assert.equal(spk_h.toHex(0, spk_h.capacity()), test_scripts["p2wsh"][i]["hash"]);
      }
    });
  });

  describe("P2pkhScript", function() {
    it("can be initialized from a public key hash", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const pkh = new ByteBuffer.fromHex(test_scripts["p2pkh"][i]["pubkeyhash"]);
        assert(pkh instanceof ByteBuffer);
        const sc = new scripts.P2pkhScript(pkh);
        assert.equal(sc.toHex(), test_scripts["p2pkh"][i]["hex"]);
        assert.equal(sc.type, "p2pkh");
        assert.equal(sc.pubkeyhash, pkh);
      }
    });
    it("can be initialized from an address", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const addr = address.Address.fromBase58(test_scripts["p2pkh"][i]["address"]);
        assert(addr instanceof address.Address);
        const sc = new scripts.P2pkhScript(addr);
        assert.equal(sc.toHex(), test_scripts["p2pkh"][i]["hex"]);
        assert.equal(sc.type, "p2pkh");
        assert.equal(sc.pubkeyhash, addr.hash);
      }
    });
    it("can be initialized from a public key", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const pk = crypto.Publickey.fromHex(test_scripts["p2pkh"][i]["pubkey"]);
        const pk_hash = pk.hash();
        assert(pk instanceof crypto.Publickey);
        const sc = new scripts.P2pkhScript(pk);
        assert.equal(sc.toHex(), test_scripts["p2pkh"][i]["hex"]);
        assert.equal(sc.type, "p2pkh");
        assert.equal(
          sc.pubkeyhash.toHex(0, sc.pubkeyhash.capacity()),
          pk_hash.toHex(0, pk_hash.capacity())
        );
      }
    });
    it("can return a p2pkh address", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const pkh = new ByteBuffer.fromHex(test_scripts["p2pkh"][i]["pubkeyhash"]);
        const sc = new scripts.P2pkhScript(pkh);
        const addr = sc.getAddress();
        assert(addr instanceof address.Address);
        assert.equal(addr.type, "p2pkh");
        assert.equal(addr.hash, sc.pubkeyhash);
        assert.equal(addr.toBase58().toString("hex"), test_scripts["p2pkh"][i]["address"]);
      }
    });
  });
  describe("P2wpkhV0Script", function() {
    it("can be initialized from a segwit address", function() {
      for (var i = 0; i < segwitaddresses["p2wpkh"].length; i++) {
        const addr = address.SegwitAddress.fromBech32(segwitaddresses["p2wpkh"][i]["bech32"]);
        assert(addr instanceof address.SegwitAddress);
        const sc = new scripts.P2wpkhV0Script(addr);
        assert.equal(
          sc.pubkeyhash.toHex(0, sc.pubkeyhash.capacity()),
          segwitaddresses["p2wpkh"][i]["hash"]
        );
        assert.equal(addr.hash, sc.pubkeyhash);
      }
    });
  });
  describe("P2wshV0Script", function() {
    it("can be initialized from a segwit address", function() {
      for (var i = 0; i < segwitaddresses["p2wsh"].length; i++) {
        const addr = address.SegwitAddress.fromBech32(segwitaddresses["p2wsh"][i]["bech32"]);
        assert(addr instanceof address.SegwitAddress);
        const sc = new scripts.P2wshV0Script(addr);
        assert.equal(
          sc.scripthash.toHex(0, sc.scripthash.capacity()),
          segwitaddresses["p2wsh"][i]["hash"]
        );
        assert.equal(addr.hash, sc.scripthash);
      }
    });
  });
  describe("P2shScript", function() {
    it("can be initialized from a script hash", function() {
      for (var i = 0; i < test_scripts["p2sh"].length; i++) {
        const sh = new ByteBuffer.fromHex(test_scripts["p2sh"][i]["scripthash"]);
        assert(sh instanceof ByteBuffer);
        const sc = new scripts.P2shScript(sh);
        assert.equal(sc.toHex(), test_scripts["p2sh"][i]["hex"]);
        assert.equal(sc.type, "p2sh");
        assert.equal(
          sc.scripthash.toHex(0, sc.scripthash.capacity()),
          sh.toHex(0, sh.capacity())
        );
      }
    });
    it("can be initialized from an address", function() {
      for (var i = 0; i < test_scripts["p2sh"].length; i++) {
        const addr = address.Address.fromBase58(test_scripts["p2sh"][i]["address"]);
        assert(addr instanceof address.Address);
        const sc = new scripts.P2shScript(addr);
        assert.equal(sc.toHex(), test_scripts["p2sh"][i]["hex"]);
        assert.equal(sc.type, "p2sh");
        assert.equal(sc.scripthash, addr.hash);
      }
    });
    it("can be initialized from a p2pkh Script", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const pkh = new ByteBuffer.fromHex(test_scripts["p2pkh"][i]["pubkeyhash"]);
        const p2pkh = new scripts.P2pkhScript(pkh);
        const p2sh = new scripts.P2shScript(p2pkh);
        assert(p2sh instanceof scripts.P2shScript);
        assert.equal(
          p2sh.scripthash.toHex(0, p2sh.scripthash.capacity()),
          test_scripts["p2pkh"][i]["p2shHash"]
        );
      }
    });
    it("can be initialized from a multisig script", function() {
      for (var i = 0; i < test_scripts["multisig"].length; i++) {
        let data = test_scripts["multisig"][i]["data"];
        data = _.map(data, function(element, index) {
          if (index == 0 || index == data.length - 1) return element;
          return crypto.Publickey.fromHex(element);
        });
        const msc = new scripts.MultiSigScript(data);
        assert(msc instanceof scripts.MultiSigScript);
        const p2sh = new scripts.P2shScript(msc);
        assert.equal(
          p2sh.scripthash.toHex(0, p2sh.scripthash.capacity()),
          test_scripts["multisig"][i]["p2shHash"]
        );
      }
    });
    it("can be initialized from a relative timelock script", function() {
      for (var i = 0; i < test_scripts["relative_timelock"].length; i++) {
        const sc = new scripts.RelativeTimelockScript(
          test_scripts["relative_timelock"][i]["data"]
        );

        assert(sc instanceof scripts.RelativeTimelockScript);
        const p2sh = new scripts.P2shScript(sc);
        assert.equal(
          p2sh.scripthash.toHex(0, p2sh.scripthash.capacity()),
          test_scripts["relative_timelock"][i]["p2shHash"]
        );
      }
    });
    it("can be initialized from an if-else script", function() {
      for (var i = 0; i < test_scripts["if_else"].length; i++) {
        const if_script = test_scripts["if_else"][i]["if_script"];
        const else_script = test_scripts["if_else"][i]["else_script"];
        const sc = new scripts.IfElseScript([if_script, else_script]);
        assert(sc instanceof scripts.IfElseScript);
        const p2sh = new scripts.P2shScript(sc);
        assert.equal(
          p2sh.scripthash.toHex(0, p2sh.scripthash.capacity()),
          test_scripts["if_else"][i]["p2shHash"]
        );
      }
    });
    it("can return a p2sh address", function() {
      for (var i = 0; i < test_scripts["p2sh"].length; i++) {
        const sh = new ByteBuffer.fromHex(test_scripts["p2sh"][i]["scripthash"]);
        const sc = new scripts.P2shScript(sh);
        const addr = sc.getAddress();
        assert(addr instanceof address.Address);
        assert.equal(addr.type, "p2sh");
        assert.equal(addr.hash, sc.scripthash);
        assert.equal(addr.toBase58().toString("hex"), test_scripts["p2sh"][i]["address"]);
      }
    });
  });
  describe("MultisigScript", function() {
    it("can be initialized from an array of arguments", function() {
      for (var i = 0; i < test_scripts["multisig"].length; i++) {
        let data = test_scripts["multisig"][i]["data"];
        data = _.map(data, function(element, index) {
          if (index == 0 || index == data.length - 1) return element;
          return crypto.Publickey.fromHex(element);
        });
        const msc = new scripts.MultiSigScript(data);
        assert(msc instanceof scripts.MultiSigScript);
        assert.equal(msc.toHex(), test_scripts["multisig"][i]["hex"]);
      }
    });
    it("throws an error on inconsistent arguments", function() {
      for (var i = 0; i < test_scripts["multisig"].length; i++) {
        let data = test_scripts["multisig"][i]["data"];
        data = _.map(data, function(element, index) {
          if (index == 0) return element;
          if (index == data.length - 1) return 0;
          return crypto.Publickey.fromHex(element);
        });

        assert.throws(
          () => new scripts.MultiSigScript(data),
          Error,
          "The number of pubkeys must be equal to n,  " +
            data.length -
            2 +
            "pubkeys provided, while n is " +
            data[data.length - 1]
        );
      }
    });
  });
  describe("IfElseScript", function() {
    it("can be initialized from an array of arguments", function() {
      for (var i = 0; i < test_scripts["if_else"].length; i++) {
        const if_script = test_scripts["if_else"][i]["if_script"];
        const else_script = test_scripts["if_else"][i]["else_script"];
        const sc = new scripts.IfElseScript([if_script, else_script]);
        assert(sc instanceof scripts.IfElseScript);
        assert.equal(sc.toHex(), test_scripts["if_else"][i]["hex"]);
        assert.equal(sc.type, "if{multisig}else{RelativeTimelock p2pkh}");
      }
    });
    it("throws an error on inconsisent arguments", function() {
      for (var i = 0; i < test_scripts["if_else"].length; i++) {
        const if_script = test_scripts["if_else"][i]["if_script"];
        const else_script = 0;
        assert.throws(
          () => new scripts.IfElseScript([if_script, else_script]),
          Error,
          "Invalid objects to build an If-Else script"
        );
      }
    });
  });
  describe("RelativeTimelockScript", function() {
    it("can be initialized from an array of arguments", function() {
      for (var i = 0; i < test_scripts["relative_timelock"].length; i++) {
        const sc = new scripts.RelativeTimelockScript(
          test_scripts["relative_timelock"][i]["data"]
        );
        assert(sc instanceof scripts.RelativeTimelockScript);
        assert.equal(sc.toHex(), test_scripts["relative_timelock"][i]["hex"]);
        assert.equal(sc.type, "RelativeTimelock p2pkh");
      }
    });
    it("throws an error on inconsistent arguments", function() {
      for (var i = 0; i < test_scripts["relative_timelock"].length; i++) {
        const locked_script = 0;
        const sequence = 1;
        assert.throws(
          () => new scripts.RelativeTimelockScript([sequence, locked_script]),
          Error,
          "Invalid objects provided to build a RelativeTimelockScript"
        );
      }
    });
  });
});

describe("Keys", function() {
  describe("Privatekey", function() {
    it("can be imported from bip32 format", function() {
      for (var i = 0; i < bip32keys.length; i++) {
        const pk = crypto.Privatekey.fromBip32(bip32keys[i]["priv"]);
        assert(pk instanceof crypto.Privatekey);
        assert.equal(pk.toHex(), bip32keys[i]["hexpriv"]);
      }
    });
    //Test vectors are mainnet random keys so we need to setup the network again
    it("can convert from and to WIF", function() {
      net.setup("mainnet", true);
      for (var i = 0; i < wifkeys.length; i++) {
        const pk = crypto.Privatekey.fromWIF(wifkeys[i]["wif"]);
        assert(pk instanceof crypto.Privatekey);
        assert.equal(pk.toHex(), wifkeys[i]["hex"]);
        assert.equal(pk.toWIF(), wifkeys[i]["wif"]);
      }
      net.setup("testnet", true);
    });
    it("can generate the corresponding public key", function() {
      for (var i = 0; i < bip32keys.length; i++) {
        const prk = crypto.Privatekey.fromBip32(bip32keys[i]["priv"]);
        const puk = prk.getPublic();
        assert(puk instanceof crypto.Publickey);
        assert.equal(
          bip32keys[i]["hexpub"],
          puk.compressed.toHex(0, puk.compressed.capacity())
        );
        assert.equal(
          bip32keys[i]["u_hexpub"],
          puk.uncompressed.toHex(0, puk.uncompressed.capacity())
        );
      }
    });
    it("can sign a message using ecdsa on secp256k1", function() {
      for (var i = 0; i < signatures.length; i++) {
        const prk = crypto.Privatekey.fromHex(signatures[i]["key"]);
        const sig = prk.signDER(signatures[i]["message"]);
        assert.equal(signatures[i]["signature"], sig);
      }
    });
  });
  describe("Publickey", function() {
    it("can uncompress a compressed key", function() {
      for (var i = 0; i < bip32keys.length; i++) {
        const compressed = new ByteBuffer.fromHex(bip32keys[i]["hexpub"]);
        const uncompressed = crypto.Publickey.uncompress(compressed);
        assert.equal(uncompressed.toHex(0, uncompressed.capacity()), bip32keys[i]["u_hexpub"]);
      }
    });
    it("can be imported from bip32 format", function() {
      for (var i = 0; i < bip32keys.length; i++) {
        const pub = crypto.Publickey.fromBip32(bip32keys[i]["pub"]);
        assert(pub instanceof crypto.Publickey);
        assert.equal(
          pub.compressed.toHex(0, pub.compressed.capacity()),
          bip32keys[i]["hexpub"]
        );
        assert.equal(
          pub.uncompressed.toHex(0, pub.uncompressed.capacity()),
          bip32keys[i]["u_hexpub"]
        );
      }
    });
    it("can compute the pubkeyhash", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const key = crypto.Publickey.fromHex(test_scripts["p2pkh"][i]["pubkey"]);
        const keyhash = key.hash();
        assert(key instanceof crypto.Publickey);
        assert.equal(
          keyhash.toHex(0, keyhash.capacity()),
          test_scripts["p2pkh"][i]["pubkeyhash"]
        );
      }
    });
    it("can compute the corresponding p2pkh address", function() {
      for (var i = 0; i < test_scripts["p2pkh"].length; i++) {
        const key = crypto.Publickey.fromHex(test_scripts["p2pkh"][i]["pubkey"]);
        const addr = key.toAddress();
        assert(addr instanceof address.Address);
        assert.equal(addr.type, "p2pkh");
        assert.equal(
          addr.hash.toHex(0, addr.hash.capacity()),
          test_scripts["p2pkh"][i]["pubkeyhash"]
        );
        assert.equal(addr.toBase58(), test_scripts["p2pkh"][i]["address"]);
      }
    });
  });
  describe("HDPrivateKey", function() {
    it("can derive its childs according to bip32", function() {
      let masterpriv, masterpub;
      for (var i = 0; i < hd_keys.length; i++) {
        if (hd_keys[i]["path"] == "m") {
          masterpriv = new hd.HDPrivateKey(hd_keys[i]["prv"]);
          masterpub = new hd.HDPublicKey(hd_keys[i]["pub"]);
          continue;
        }
        assert.equal(
          masterpriv.derive(hd_keys[i]["path"])._bckey.toString(),
          hd_keys[i]["prv"]
        );
      }
    });
    it("can generate the corresponding HDPublicKey", function() {
      for (var i = 0; i < hd_keys.length; i++) {
        const priv = new hd.HDPrivateKey(hd_keys[i]["prv"]);
        const pub = priv.getPublic();
        assert(pub instanceof hd.HDPublicKey);
        assert.equal(pub._bckey.toString(), hd_keys[i]["pub"]);
      }
    });
    it("can be generated from a seed", function() {
      net.setup("mainnet", true);
      for (var i = 0; i < hd_keys.length; i++) {
        if (hd_keys[i]["path"] == "m") {
          const priv = hd.HDPrivateKey.fromSeed(hd_keys[i]["seed"]);
          assert.equal(priv._bckey.toString(), hd_keys[i]["prv"]);
          assert.equal(priv.getPublic()._bckey.toString(), hd_keys[i]["pub"]);
        }
      }
      net.setup("testnet", true);
    });
  });
  describe("HDPublicKey", function() {
    it("can derive its childs according to bip32", function() {
      const paths = [
        "m/0/1/2147483646/2",
        "m/2147483646/0",
        "m/0/2147483647/1/2147483646/2",
        "m/156131385/44645489/4865448/4896853"
      ];
      const masterpriv = new hd.HDPrivateKey(hd_keys[0]["prv"]);
      const masterpub = new hd.HDPublicKey(hd_keys[0]["pub"]);
      _.forEach(paths, path => {
        let newpub = masterpub.derive(path);
        let newpriv = masterpriv.derive(path);

        assert.equal(newpriv.getPublic()._bckey.toString(), newpub._bckey.toString());
      });
    });
  });
});
